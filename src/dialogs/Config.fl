# data file for the Fltk User Interface Designer (fluid)
version 1.0107 
header_name {.h} 
code_name {.cxx}
decl {\#include "main.h"} {} 

decl {\#include "globals.h"} {public
} 

decl {\#include "modem.h"} {public
} 

decl {\#include "configuration.h"} {public
} 

decl {\#include "combo.h"} {} 

decl {Fl_Double_Window *dlgConfig;} {public
} 

Function {ConfigureDialog()} {open
} {
  code {static char *szShifts  = "23|85|160|170|182|200|240|350|425|850";
static char *szBauds   = "45|45.45|50|56|75|100|110|150|200|300";
static char *szSelBits = "5 (baudot)|7 (ascii)|8 (ascii)";
static char *szParity  = "none|even|odd|zero|one";
static char *szStopBits = "1|1.5|2";
static char *szOliviaTones = "2|4|8|16|32|64|128|256";
static char *szOliviaBandwidth = "125|250|500|1000|2000";
static char *szBaudRates = "300|600|1200|2400|4800|9600|19200|38400|57600|115200|230400|460800";} {}
  code {} {}
  Fl_Window {} {
    label {fldigi - config} open
    xywh {361 556 400 255} type Double color 45 selection_color 51 align 80 visible
  } {
    Fl_Tabs tabsConfigure {open
      xywh {0 0 405 220} color 47 selection_color 9
    } {
      Fl_Group tabOperator {
        label Oper
        callback {progdefaults.changed = true;} open
        xywh {0 25 400 195} color 51 selection_color 51 when 1 hide
      } {
        Fl_Input inpMyCallsign {
          label {Callsign:}
          xywh {78 36 85 24}
        }
        Fl_Input inpMyName {
          label {Name:}
          callback {progdefaults.changed = true;}
          xywh {78 62 120 24}
        }
        Fl_Input inpMyQth {
          label {Qth:}
          callback {progdefaults.changed = true;}
          xywh {78 89 312 24}
        }
        Fl_Input inpMyLocator {
          label {Locator:}
          callback {progdefaults.changed = true;}
          xywh {78 116 85 24}
        }
        Fl_Group {} {
          label {Contest Setup}
          xywh {5 145 390 70} box ENGRAVED_FRAME align 21
        } {
          Fl_Check_Button btnUseLeadingZeros {
            label {Use Leading Zeros}
            callback {progdefaults.UseLeadingZeros = o->value();
progdefaults.changed = true;}
            xywh {42 175 165 15} down_box DOWN_BOX value 1
          }
          Fl_Value_Input nbrContestStart {
            label {Starting \#:}
            callback {progdefaults.ContestStart = (int)o->value();
progdefaults.changed = true;}
            xywh {216 170 45 24} align 1 minimum 1 maximum 10000 step 1 value 1
          }
          Fl_Value_Input nbrContestDigits {
            label {\# of digits:}
            callback {progdefaults.ContestDigits = (int)o->value();
progdefaults.changed = true;}
            xywh {298 170 45 24} align 1 minimum 1 maximum 5 step 1 value 3
          }
        }
      }
      Fl_Group tabWaterfall {
        label {W-fall} open
        xywh {0 25 400 195} color 51 selection_color 51 hide
      } {
        Fl_Group {} {
          label {FFT Prefilter} open
          xywh {5 35 395 45} box ENGRAVED_BOX color 51 align 21
        } {
          Fl_Check_Button btnBlackman {
            label Blackman
            callback {if (o->value() == 1) {
progdefaults.wfPreFilter=1;
btnHamming->value(0);
btnHanning->value(0);
btnTriangular->value(0);
} else o->value(1);
progdefaults.changed = true;}
            xywh {11 55 90 15} down_box DOWN_BOX
            code0 {if(progdefaults.wfPreFilter==1)o->value(1);else o->value(0);}
          }
          Fl_Check_Button btnHamming {
            label Hamming
            callback {if (o->value() == 1) {
progdefaults.wfPreFilter=2;
btnBlackman->value(0);
btnHanning->value(0);
btnTriangular->value(0);
} else o->value(1);
progdefaults.changed = true;}
            xywh {108 55 90 15} down_box DOWN_BOX
            code0 {if(progdefaults.wfPreFilter==2)o->value(1);else o->value(0);}
          }
          Fl_Check_Button btnHanning {
            label Hanning
            callback {if (o->value() == 1) {
progdefaults.wfPreFilter=3;
btnHamming->value(0);
btnBlackman->value(0);
btnTriangular->value(0);
} else o->value(1);
progdefaults.changed = true;}
            xywh {206 55 90 15} down_box DOWN_BOX
            code0 {if(progdefaults.wfPreFilter==3)o->value(1);else o->value(0);}
          }
          Fl_Check_Button btnTriangular {
            label Triangular
            callback {if (o->value() == 1) {
progdefaults.wfPreFilter=4;
btnHamming->value(0);
btnHanning->value(0);
btnBlackman->value(0);
} else o->value(1);
progdefaults.changed = true;}
            xywh {304 55 90 15} down_box DOWN_BOX
            code0 {if(progdefaults.wfPreFilter==4)o->value(1);else o->value(0);}
          }
        }
        Fl_Group {} {open
          xywh {5 80 395 49} box ENGRAVED_FRAME
        } {
          Fl_Check_Button btnUseCursorLines {
            label {Use Cursor BW Lines}
            callback {progdefaults.UseCursorLines = o->value();
progdefaults.changed = true;}
            xywh {25 85 165 20} down_box DOWN_BOX
            code0 {o->value(progdefaults.UseCursorLines);}
          }
          Fl_Check_Button btnUseBWTracks {
            label {Use BW Tracks}
            callback {progdefaults.UseBWTracks = o->value();
progdefaults.changed = true;}
            xywh {25 105 165 20} down_box DOWN_BOX
            code0 {o->value(progdefaults.UseBWTracks);}
          }
          Fl_Check_Button btnUseCursorCenterLine {
            label {Use Cursor Center Line}
            callback {progdefaults.UseCursorCenterLine = o->value();
progdefaults.changed = true;}
            xywh {200 84 165 20} down_box DOWN_BOX
            code0 {o->value(progdefaults.UseCursorCenterLine);}
          }
          Fl_Check_Button btnViewXmtSignal {
            label {View Xmt Signal}
            callback {progdefaults.viewXmtSignal=o->value();
progdefaults.changed = true;}
            xywh {200 105 165 20} down_box DOWN_BOX
            code0 {o->value(progdefaults.viewXmtSignal);}
          }
        }
        Fl_Group {} {open
          xywh {5 130 395 85} box ENGRAVED_FRAME
        } {
          Fl_Button Palette {
            label {Palette:}
            callback {progdefaults.changed = true;}
            xywh {23 152 260 24} box DOWN_BOX color 0 align 5
            code0 {\#include "colorbox.h"}
            class colorbox
          }
          Fl_Button {btnColor[0]} {
            callback {selectColor(0);
progdefaults.changed = true;}
            xywh {15 181 20 24}
          }
          Fl_Button {btnColor[1]} {
            callback {selectColor(1);
progdefaults.changed = true;}
            xywh {47 181 20 24}
          }
          Fl_Button {btnColor[2]} {
            callback {selectColor(2);
progdefaults.changed = true;}
            xywh {79 181 20 24}
          }
          Fl_Button {btnColor[3]} {
            callback {selectColor(3);
progdefaults.changed = true;}
            xywh {111 181 20 24}
          }
          Fl_Button {btnColor[4]} {
            callback {selectColor(4);
progdefaults.changed = true;}
            xywh {143 181 20 24}
          }
          Fl_Button {btnColor[5]} {
            callback {selectColor(5);
progdefaults.changed = true;}
            xywh {175 181 20 24}
          }
          Fl_Button {btnColor[6]} {
            callback {selectColor(6);
progdefaults.changed = true;}
            xywh {207 181 20 24}
          }
          Fl_Button {btnColor[7]} {
            callback {selectColor(7);
progdefaults.changed = true;}
            xywh {239 181 20 24}
          }
          Fl_Button {btnColor[8]} {
            callback {selectColor(8);
progdefaults.changed = true;}
            xywh {271 181 20 24}
          }
          Fl_Button btnLoadPalette {
            label Load
            callback {loadPalette();
progdefaults.changed = true;}
            xywh {315 146 70 24}
            code0 {\#include "colorbox.h"}
          }
          Fl_Button btnSavePalette {
            label Save
            callback {savePalette();}
            xywh {315 181 70 24}
            code0 {\#include "colorbox.h"}
          }
        }
      }
      Fl_Group tabInterface {
        label RigCtl open
        xywh {0 25 400 195} color 51 selection_color 51 hide
      } {
        Fl_Group {} {
          label Ptt open
          xywh {10 31 185 179} box ENGRAVED_FRAME align 21
        } {
          Fl_Round_Button {btnPTT[0]} {
            label none
            callback {btnPTT[1]->value(0);
btnPTT[2]->value(0);
btnPTT[3]->value(0);
btnPTT[4]->value(0);
o->value(1);
progdefaults.changed = true;}
            xywh {25 52 64 15} down_box DIAMOND_DOWN_BOX value 1 selection_color 1
          }
          Fl_Round_Button {btnPTT[1]} {
            label Hamlib
            callback {btnPTT[0]->value(0);
btnPTT[2]->value(0);
btnPTT[3]->value(0);
btnPTT[4]->value(0);
o->value(1);
progdefaults.changed = true;}
            xywh {107 53 67 15} down_box DIAMOND_DOWN_BOX selection_color 1 deactivate
          }
          Fl_Round_Button {btnPTT[2]} {
            label Memmap
            callback {btnPTT[0]->value(0);
btnPTT[1]->value(0);
btnPTT[3]->value(0);
btnPTT[4]->value(0);
o->value(1);
progdefaults.changed = true;}
            xywh {25 73 85 15} down_box DIAMOND_DOWN_BOX selection_color 1 deactivate
          }
          Fl_Round_Button {btnPTT[3]} {
            label RigCAT
            callback {btnPTT[0]->value(0);
btnPTT[1]->value(0);
btnPTT[2]->value(0);
btnPTT[4]->value(0);
o->value(1);
progdefaults.changed = true;}
            xywh {107 74 85 15} down_box DIAMOND_DOWN_BOX selection_color 1 deactivate
          }
          Fl_Group {} {open
            xywh {12 114 180 94} box ENGRAVED_FRAME align 21
          } {
            Fl_Input inpTTYdev {
              label {Port:}
              callback {progdefaults.changed = true;}
              xywh {66 120 120 22}
            }
            Fl_Round_Button btnRTSptt {
              label RTS
              callback {progdefaults.changed = true;}
              xywh {20 167 54 15} down_box DOWN_BOX
            }
            Fl_Round_Button btnDTRptt {
              label DTR
              callback {progdefaults.changed = true;}
              xywh {20 187 59 15} down_box DOWN_BOX
            }
            Fl_Round_Button btnRTSplusV {
              label {RTS=+V}
              callback {progdefaults.changed = true;}
              xywh {83 167 87 15} down_box DOWN_BOX
            }
            Fl_Round_Button btnDTRplusV {
              label {DTR=+V}
              callback {progdefaults.changed = true;}
              xywh {83 187 87 15} down_box DOWN_BOX
            }
            Fl_Box {} {
              label {Initial value}
              xywh {80 147 105 17}
            }
          }
          Fl_Round_Button {btnPTT[4]} {
            label TTY
            callback {btnPTT[0]->value(0);
btnPTT[1]->value(0);
btnPTT[2]->value(0);
btnPTT[3]->value(0);
o->value(1);
progdefaults.changed = true;}
            xywh {26 95 52 14} down_box DIAMOND_DOWN_BOX selection_color 1
          }
        }
        Fl_Group {} {
          label {Rig Control} open
          xywh {195 31 200 151} box ENGRAVED_FRAME align 21
        } {
          Fl_Check_Button chkUSEHAMLIB {
            label Hamlib
            callback {if (o->value() == 1) {
  chkUSEMEMMAP->value(0);
  chkUSERIGCAT->value(0);
  btnPTT[3]->value(0);
  btnPTT[3]->deactivate();
  btnPTT[2]->value(0);
  btnPTT[2]->deactivate();
  btnPTT[1]->activate();
  } else {
  if (btnPTT[1]->value()==1)
 	btnPTT[0]->value(1);
  btnPTT[1]->value(0);
  btnPTT[1]->deactivate();
  }
progdefaults.changed = true;}
            xywh {205 75 19 15} down_box DOWN_BOX align 8
          }
          Fl_Check_Button chkUSEMEMMAP {
            label Memmap
            callback {if(o->value() == 1){
  chkUSEHAMLIB->value(0);
  chkUSERIGCAT->value(0);
  btnPTT[3]->value(0);
  btnPTT[3]->deactivate();
  btnPTT[1]->value(0);
  btnPTT[1]->deactivate();
  btnPTT[2]->activate();
  } else {
  if (btnPTT[2]->value()==1)
  	btnPTT[0]->value(1);
  btnPTT[2]->value(0);
  btnPTT[2]->deactivate();
  }
progdefaults.changed = true;}
            xywh {205 56 19 15} down_box DOWN_BOX align 8
          }
          Fl_Box cboHamlibRig {
            label {Rig:}
            callback {progdefaults.changed = true;}
            xywh {230 101 160 22} box DOWN_BOX color 7 align 4
            code0 {o->readonly();}
            class Fl_ComboBox
          }
          Fl_Input inpRIGdev {
            label {Device:}
            callback {progdefaults.changed = true;}
            xywh {269 126 120 22}
          }
          Fl_Choice mnuBaudRate {
            label {Baud Rate:}
            callback {progdefaults.changed = true;} open
            xywh {288 153 100 22} down_box BORDER_BOX
            code0 {o->add(szBaudRates);}
          } {}
          Fl_Check_Button chkUSERIGCAT {
            label RigCAT
            callback {if (o->value() == 1) {
  chkUSEHAMLIB->value(0);
  chkUSEMEMMAP->value(0);
  btnPTT[1]->deactivate();
  btnPTT[2]->value(0);
  btnPTT[2]->deactivate();
  btnPTT[3]->activate();
  } else {
  if (btnPTT[3]->value() == 1)
  	btnPTT[0]->value(1);
  btnPTT[3]->value(0);
  btnPTT[3]->deactivate();
  }
progdefaults.changed = true;}
            xywh {305 56 19 15} down_box DOWN_BOX align 8
          }
        }
        Fl_Button btnInit_Interface {
          label Initialize
          callback {progdefaults.initInterface();
progdefaults.changed = true;}
          xywh {308 185 80 24}
        }
      }
      Fl_Group {} {
        label QRZ open
        xywh {0 25 400 195} color 51 selection_color 51 hide
      } {
        Fl_Check_Button btnQRZnotavailable {
          label {QRZ not available}
          callback {if (o->value() == 1) {
btnQRZcdrom->value(0);
btnQRZsocket->value(0);
progdefaults.QRZ = 0;
}
progdefaults.changed = true;}
          xywh {31 50 200 20} down_box DOWN_BOX value 1
          code0 {if (progdefaults.QRZ == 0) o->value(1); else o->value(0);}
        }
        Fl_Check_Button btnQRZsocket {
          label {QRZ internet connection}
          callback {if (o->value() == 1) {
btnQRZcdrom->value(0);
btnQRZnotavailable->value(0);
progdefaults.QRZ = 1;
}
progdefaults.changed = true;}
          xywh {32 103 200 20} down_box DOWN_BOX
          code0 {if (progdefaults.QRZ == 1) o->value(1); else o->value(0);}
        }
        Fl_Check_Button btnQRZcdrom {
          label {QRZ cdrom}
          callback {if (o->value() == 1) {
btnQRZsocket->value(0);
btnQRZnotavailable->value(0);
progdefaults.QRZ = 2;
}
progdefaults.changed = true;}
          xywh {31 76 200 20} down_box DOWN_BOX
          code0 {if (progdefaults.QRZ == 2) o->value(1); else o->value(0);}
        }
      }
      Fl_Group tabSoundCard {
        label SndCrd open
        xywh {0 25 405 195} color 51 selection_color 51
      } {
        Fl_Tabs tabsSoundCard {open
          xywh {0 25 405 195} selection_color 10
        } {
          Fl_Group tabMixer {
            label Mixer open
            xywh {0 50 400 170} color 51 selection_color 51 hide
          } {
            Fl_Light_Button btnLineIn {
              label {Line In}
              callback {if (o->value() == 1) {
    btnMicIn->value(0);
    progdefaults.LineIn = true;
    progdefaults.MicIn = false;
    setMixerInput(1);
} else {
    setMixerInput(0);
    progdefaults.LineIn = false;
}
progdefaults.changed = true;}
              xywh {295 64 74 22} selection_color 3
              code0 {extern void setMixerInput(int);}
            }
            Fl_Light_Button btnMicIn {
              label {Mic In}
              callback {if (o->value() == 1) {
    btnLineIn->value(0);
    progdefaults.LineIn = false;
    progdefaults.MicIn = true;
    setMixerInput(2);
} else {
    setMixerInput(0);
    progdefaults.MicIn = false;
}
progdefaults.changed = true;}
              xywh {295 94 74 22}
            }
            Fl_Value_Slider valPCMvolume {
              label PCM
              callback {setPCMvolume(o->value());
progdefaults.changed = true;}
              xywh {19 125 340 21} type {Horz Knob} color 26 selection_color 1 align 8 maximum 100 step 1 value 80 textsize 14
              code0 {extern void setPCMvolume(double);}
            }
            Fl_Input_Choice menuMix {
              label Device
              callback {progdefaults.MXdevice = o->value();
enableMixer(false);
enableMixer(true);
progdefaults.changed = true;} open
              xywh {105 90 110 25}
              code0 {o->value(progdefaults.MXdevice.c_str());}
            } {}
            Fl_Check_Button btnMixer {
              label {Manage mixer}
              callback {enableMixer(o->value());
progdefaults.changed = true;}
              xywh {55 61 25 25} down_box DOWN_BOX
              code0 {extern void resetMixerControls();}
              code1 {o->value(progdefaults.EnableMixer);}
            }
          }
          Fl_Group tabAudio {
            label Audio open
            xywh {0 50 400 170} color 51 selection_color 51
          } {
            Fl_Spinner cntRxRateCorr {
              label {RX ppm:}
              callback {progdefaults.RX_corr = (int)o->value();
progdefaults.changed = true;}
              xywh {299 161 75 24}
              code0 {o->step(1);}
              code1 {o->minimum(-50000);}
              code2 {o->maximum(50000);}
            }
            Fl_Spinner cntTxRateCorr {
              label {TX ppm:}
              callback {progdefaults.TX_corr = (int)o->value();
progdefaults.changed = true;}
              xywh {299 190 75 24}
              code0 {o->step(1);}
              code1 {o->minimum(-50000);}
              code2 {o->maximum(50000);}
            }
            Fl_Spinner cntTxOffset {
              label {Tx offset:}
              callback {progdefaults.TxOffset = (int)o->value();
progdefaults.changed = true;}
              xywh {177 190 45 24}
              code0 {o->value(progdefaults.TxOffset);}
              code1 {o->step(1);}
              code2 {o->minimum(-50);}
              code3 {o->maximum(50);}
            }
            Fl_Group AudioIO {
              label {I/O} open
              xywh {0 55 140 70} box ENGRAVED_FRAME align 21
            } {
              Fl_Round_Button {btnAudioIO[0]} {
                label OSS
                callback {btnAudioIO[1]->value(0);
o->value(1);
menuOSSDev->activate();
menuPADev->deactivate();
scDevice = menuOSSDev->value();
progdefaults.btnAudioIOis = 0;
progdefaults.changed = true;
resetSoundCard();}
                xywh {25 70 25 25} down_box DIAMOND_DOWN_BOX selection_color 1
              }
              Fl_Round_Button {btnAudioIO[1]} {
                label PortAudio
                callback {btnAudioIO[0]->value(0);
o->value(1);
menuPADev->activate();
menuOSSDev->deactivate();
scDevice = menuPADev->value();
progdefaults.btnAudioIOis = 1;
progdefaults.changed = true;
resetSoundCard();}
                xywh {25 95 25 25} down_box DIAMOND_DOWN_BOX selection_color 1
              }
            }
            Fl_Input_Choice menuOSSDev {
              label {OSS device}
              callback {scDevice = progdefaults.OSSdevice = o->value();
resetSoundCard();
progdefaults.changed = true;} open
              xywh {155 60 110 25} align 8
              code0 {o->value(progdefaults.OSSdevice.c_str());}
            } {}
            Fl_Input_Choice menuPADev {
              label {PortAudio device}
              callback {scDevice = progdefaults.PAdevice = o->value();
resetSoundCard();
progdefaults.changed = true;} open selected
              xywh {155 90 110 25} align 8
              code0 {o->value(progdefaults.PAdevice.c_str());}
            } {}
          }
        }
      }
      Fl_Group {} {
        label Misc open
        xywh {0 25 400 195} color 51 selection_color 51 hide
      } {
        Fl_Group {} {
          label {Sweet Spot} open
          xywh {5 30 390 90} box ENGRAVED_FRAME align 21
        } {
          Fl_Value_Input valCWsweetspot {
            label CW
            callback {progdefaults.CWsweetspot=o->value();
progdefaults.changed = true;}
            xywh {50 59 65 20} minimum 200 maximum 4000 step 1 value 1000
            code0 {o->value(progdefaults.CWsweetspot);}
          }
          Fl_Value_Input valRTTYsweetspot {
            label RTTY
            callback {progdefaults.RTTYsweetspot=o->value();
progdefaults.changed = true;}
            xywh {182 59 65 20} minimum 200 maximum 4000 step 1 value 1000
            code0 {o->value(progdefaults.RTTYsweetspot);}
          }
          Fl_Value_Input valPSKsweetspot {
            label {PSK etal}
            callback {progdefaults.PSKsweetspot=o->value();
progdefaults.changed = true;}
            xywh {315 59 65 20} minimum 200 maximum 4000 step 1 value 1000
            code0 {o->value(progdefaults.PSKsweetspot);}
          }
          Fl_Check_Button btnStartAtSweetSpot {
            label {Start New Modem at Sweet Spot}
            callback {progdefaults.StartAtSweetSpot = o->value();
progdefaults.changed = true;}
            xywh {49 88 246 25} down_box DOWN_BOX value 1
            code0 {o->value(progdefaults.StartAtSweetSpot);}
          }
        }
        Fl_Check_Button btnsendid {
          label {Xmt Mode ID}
          callback {progdefaults.sendid=o->value();
progdefaults.changed = true;}
          xywh {50 130 115 20} down_box DOWN_BOX
        }
      }
      Fl_Group tabModems {
        label Modems open
        xywh {0 25 401 195} color 51 selection_color 51 hide
      } {
        Fl_Tabs tabsModems {open
          xywh {0 25 401 195} color 51 selection_color 10 align 9
        } {
          Fl_Group tabCW {
            label CW open
            xywh {0 50 400 170} color 51 selection_color 51 hide
          } {
            Fl_Group {} {open
              xywh {1 60 398 155} box ENGRAVED_FRAME
            } {
              Fl_Value_Slider sldrCWbandwidth {
                label BW
                callback {progdefaults.CWbandwidth = (int)o->value();
progdefaults.changed = true;}
                xywh {65 65 325 20} type {Horz Knob} color 7 align 4 minimum 10 maximum 500 step 10 value 150 textsize 14
                code0 {o->value(progdefaults.CWbandwidth);}
              }
              Fl_Counter cntCWrange {
                label {Rx Trkg Rng}
                callback {progdefaults.CWrange = (int)o->value();
progdefaults.changed = true;}
                xywh {140 89 65 20} type Simple align 4 minimum 5 maximum 25 step 1 value 10
                code0 {o->value(progdefaults.CWrange);}
              }
              Fl_Check_Button btnCWrcvTrack {
                label {Enable Rx Trkg}
                callback {progdefaults.CWtrack = o->value();
progdefaults.changed = true;}
                xywh {215 89 20 20} down_box DOWN_BOX value 1 align 8
                code0 {o->value(progdefaults.CWtrack);}
              }
              Fl_Value_Output valCWrcvWPM {
                label RxWPM
                callback {progdefaults.changed = true;}
                xywh {65 113 35 20} color 7
              }
              Fl_Progress prgsCWrcvWPM {
                xywh {100 113 290 20} color 8 selection_color 110 align 0
              }
              Fl_Value_Slider sldrCWxmtWPM {
                label TxWPM
                callback {progdefaults.CWspeed = (int)o->value();
cntPreTiming->maximum((int)(2400/o->value())/2.0);
cntPostTiming->maximum((int)(2400/o->value())/2.0);
progdefaults.changed = true;}
                xywh {65 135 325 20} type {Horz Knob} color 215 align 4 minimum 5 maximum 100 step 1 value 20 textsize 14
                code0 {o->value(progdefaults.CWspeed);}
              }
              Fl_Counter cntCWlowerlimit {
                label Lower
                callback {progdefaults.CWlowerlimit = (int)o->value();
progdefaults.changed = true;
sldrCWxmtWPM->minimum(o->value());
sldrCWxmtWPM->value(progdefaults.CWspeed);
sldrCWxmtWPM->redraw();
cntCWupperlimit->minimum(o->value()+20);}
                xywh {203 160 65 20} type Simple align 4 minimum 5 maximum 20 step 5 value 10
                code0 {o->value(progdefaults.CWlowerlimit);}
              }
              Fl_Counter cntCWupperlimit {
                label Upper
                callback {progdefaults.CWupperlimit = (int)o->value();
progdefaults.changed = true;
sldrCWxmtWPM->maximum(o->value());
sldrCWxmtWPM->value(progdefaults.CWspeed);
sldrCWxmtWPM->redraw();
cntCWlowerlimit->maximum(o->value()-20);}
                xywh {325 160 65 20} type Simple align 4 minimum 25 maximum 200 step 5 value 100
                code0 {o->value(progdefaults.CWupperlimit);}
              }
              Fl_Counter cntCWweight {
                label {Wt. %}
                callback {progdefaults.CWweight=(int)o->value();
progdefaults.changed = true;}
                xywh {64 185 65 20} type Simple align 4 minimum 20 maximum 80 step 1 value 50
                code0 {o->value(progdefaults.CWweight);}
              }
              Fl_Counter cntCWdash2dot {
                label {Dash/Dot}
                callback {progdefaults.CWdash2dot=o->value();
progdefaults.changed = true;}
                xywh {205 185 64 21} type Simple align 4 minimum 2.5 maximum 4 step 0.1 value 3
                code0 {o->value(progdefaults.CWdash2dot);}
              }
              Fl_Counter cntCWrisetime {
                label Edge
                callback {progdefaults.CWrisetime=o->value();
progdefaults.changed = true;}
                xywh {325 185 65 21} type Simple align 4 minimum 0 maximum 15 step 0.1 value 4
                code0 {o->value(progdefaults.CWrisetime);}
              }
              Fl_Counter cntCWdefWPM {
                label Default
                callback {progdefaults.defCWspeed = (int)o->value();
progdefaults.changed = true;}
                xywh {65 160 64 21} type Simple align 4 minimum 5 maximum 200 step 1 value 18
                code0 {o->value(progdefaults.defCWspeed);}
              }
            }
          }
          Fl_Group tabCWQSK {
            label QSK open
            xywh {0 50 400 170} hide
          } {
            Fl_Check_Button btnQSK {
              label {QSK on right channel}
              callback {progdefaults.QSK=o->value();
progdefaults.changed = true;}
              xywh {35 75 175 15} down_box DOWN_BOX
              code0 {o->value(progdefaults.QSK);}
            }
            Fl_Counter cntPreTiming {
              label {Pre Timing}
              callback {progdefaults.CWpre=o->value();
progdefaults.changed = true;}
              xywh {25 109 64 21} type Simple minimum 0 maximum 50 step 0.5 value 4
              code0 {o->value(progdefaults.CWpre);}
              code1 {o->maximum((int)(2400/progdefaults.CWspeed)/2.0);}
            }
            Fl_Counter cntPostTiming {
              label {Post Timing}
              callback {progdefaults.CWpost=o->value();
progdefaults.changed = true;}
              xywh {125 109 64 21} type Simple minimum 0 maximum 50 step 0.5 value 4
              code0 {o->value(progdefaults.CWpre);}
              code1 {o->maximum((int)(2400/progdefaults.CWspeed)/2.0);}
            }
          }
          Fl_Group tabDomEX {
            label DomEX open
            xywh {0 50 401 170} color 51 selection_color 51 hide
          } {
            Fl_Input txtSecondary {
              label {Secondary Text}
              callback {progdefaults.changed = true;}
              xywh {20 75 360 44} type Multiline align 5
            }
            Fl_Button btnRestartDomEX {
              label Restart
              callback {progdefaults.storeDefaults();
resetDOMEX();}
              xywh {300 172 79 28}
            }
            Fl_Counter valDominoEX_BW {
              label {BW factor:}
              callback {progdefaults.DOMINOEX_BW=o->value();
progdefaults.changed = true;}
              xywh {25 134 63 21} type Simple minimum 1 maximum 3 step 0.1 value 2
              code0 {o->value(progdefaults.DOMINOEX_BW);}
            }
          }
          Fl_Group tabFeld {
            label Feld open
            xywh {0 50 400 170} color 51 selection_color 51 hide
          } {
            Fl_Choice selHellFont {
              label {Feld Hell Font:}
              callback {progdefaults.feldfontnbr=o->value();
progdefaults.changed = true;} open
              xywh {175 62 122 20} down_box BORDER_BOX labelfont 4 textfont 4
              code0 {\#include "fontdef.h"}
              code1 {o->add(szFeldFonts);}
              code2 {o->value(progdefaults.feldfontnbr);}
            } {}
            Fl_Value_Slider sldrHellBW {
              label {Filter BW}
              callback {if (active_modem->get_mode() == MODE_FELDHELL)
      active_modem->set_bandwidth(sldrHellBW->value());
progdefaults.changed = true;}
              xywh {30 190 345 20} type Horizontal color 215 align 5 minimum 50 maximum 600 step 5 value 245 textsize 14
            }
            Fl_Check_Button btnHellXmtWidth {
              label {2x Xmt Width}
              callback {progdefaults.changed = true;}
              xywh {40 93 113 15} down_box DOWN_BOX
            }
            Fl_Check_Button btnHellRcvWidth {
              label {1/2 x Rcv Width}
              callback {progdefaults.changed = true;}
              xywh {40 113 130 15} down_box DOWN_BOX
            }
            Fl_Check_Button btnBlackboard {
              label blackboard
              callback {progdefaults.changed = true;}
              xywh {40 134 100 15} down_box DOWN_BOX
            }
            Fl_Group {} {
              label {Pulse Shape} open
              xywh {175 90 195 85} box ENGRAVED_FRAME align 21
            } {
              Fl_Check_Button btnHellFastAttack {
                label {Fast Attack (2 msec)}
                callback {if (o->value() == 1)
btnHellSlowAttack->value(0);
else
btnHellSlowAttack->value(1);
progdefaults.changed = true;}
                xywh {185 110 169 15} down_box DOWN_BOX
                code0 {o->value(0);}
              }
              Fl_Check_Button btnHellSlowAttack {
                label {Slow Attack (4 msec)}
                callback {if (o->value() == 1)
btnHellFastAttack->value(0);
else
btnHellFastAttack->value(1);
progdefaults.changed = true;}
                xywh {185 131 70 15} down_box DOWN_BOX value 1
                code0 {o->value(1);}
              }
            }
            Fl_Check_Button btnFeldHellIdle {
              label {Xmt (.) Idle Char}
              callback {progdefaults.FELD_IDLE=o->value();
progdefaults.changed = true;}
              xywh {40 155 70 15} down_box DOWN_BOX value 1
              code0 {o->value(progdefaults.FELD_IDLE);}
            }
          }
          Fl_Group tabOlivia {
            label Olivia open
            xywh {0 50 400 170} color 51 selection_color 51 hide
          } {
            Fl_Choice mnuOlivia_Tones {
              label {Tones:}
              callback {progdefaults.changed = true;} open
              xywh {90 72 85 20} down_box BORDER_BOX
              code0 {o->add(szOliviaTones);}
              code1 {o->value(2);}
            } {}
            Fl_Choice mnuOlivia_Bandwidth {
              label {Bandwidth:}
              callback {progdefaults.changed = true;} open
              xywh {270 72 85 20} down_box BORDER_BOX
              code0 {o->add(szOliviaBandwidth);}
              code1 {o->value(2);}
            } {}
            Fl_Button btnRestartOlivia {
              label Restart
              callback {progdefaults.storeDefaults();
resetOLIVIA();
progdefaults.changed = true;}
              xywh {300 172 79 28}
            }
          }
          Fl_Group {} {
            label PSKmail open
            xywh {0 50 400 170}
          } {
            Fl_Check_Button btnPSKmailSweetSpot {
              label {use PSK sweetspot}
              callback {progdefaults.PSKmailSweetSpot = o->value();}
              xywh {25 75 155 15} down_box DOWN_BOX value 1
              code0 {o->value(progdefaults.PSKmailSweetSpot);}
            }
          }
          Fl_Group tabRTTY {
            label RTTY open
            xywh {0 50 400 170} color 51 selection_color 51 hide
          } {
            Fl_Choice selShift {
              label Shift
              callback {progdefaults.changed = true;} open
              xywh {58 65 77 24} down_box BORDER_BOX
              code0 {o->add(szShifts);}
            } {}
            Fl_Choice selBaud {
              label Baud
              callback {progdefaults.changed = true;} open
              xywh {58 95 77 24} down_box BORDER_BOX
              code0 {o->add(szBauds);}
            } {}
            Fl_Choice selBits {
              label Bits
              callback {progdefaults.changed = true;} open
              xywh {179 65 77 24} down_box BORDER_BOX
              code0 {o->add(szSelBits);}
            } {}
            Fl_Choice selParity {
              label Parity
              callback {progdefaults.changed = true;} open
              xywh {179 95 77 24} down_box BORDER_BOX
              code0 {o->add(szParity);}
            } {}
            Fl_Choice selStopBits {
              label Stop
              callback {progdefaults.changed = true;} open
              xywh {179 122 77 24} down_box BORDER_BOX
              code0 {o->add(szStopBits);}
            } {}
            Fl_Check_Button chkPseudoFSK {
              label PseudoFSK
              callback {progdefaults.PseudoFSK = o->value();
progdefaults.changed = true;}
              xywh {15 126 120 24} down_box DOWN_BOX
              code0 {o->value(progdefaults.PseudoFSK);}
            }
            Fl_Button btnRestartRtty {
              label Restart
              callback {progdefaults.storeDefaults();
resetRTTY();}
              xywh {300 180 79 28}
            }
            Fl_Check_Button btnCRCRLF {
              label {CR-CR-LF}
              callback {progdefaults.changed = true;}
              xywh {15 155 115 15} down_box DOWN_BOX when 6
            }
            Fl_Check_Button btnAUTOCRLF {
              label AutoCRLF
              callback {progdefaults.changed = true;}
              xywh {15 184 125 15} down_box DOWN_BOX
            }
            Fl_Counter cntrAUTOCRLF {
              label {after:}
              callback {progdefaults.changed = true;}
              xywh {150 181 65 20} type Simple align 4 minimum 68 maximum 80 step 1 value 72
            }
            Fl_Check_Button btnRTTY_USB {
              label {RTTY is USB}
              callback {progdefaults.RTTY_USB = o->value();
progdefaults.changed = true;}
              xywh {140 153 109 20} down_box DOWN_BOX
              code0 {o->value(progdefaults.RTTY_USB);}
            }
            Fl_Group {} {
              label AFC open
              xywh {265 65 125 65} box ENGRAVED_FRAME color 51 align 21
            } {
              Fl_Round_Button {btnRTTYafc[0]} {
                label Slow
                callback {progdefaults.rtty_afcspeed=0;
progdefaults.changed = true;}
                xywh {315 70 70 15} type Radio down_box DIAMOND_DOWN_BOX selection_color 2
              }
              Fl_Round_Button {btnRTTYafc[1]} {
                label Normal
                callback {progdefaults.rtty_afcspeed=1;
progdefaults.changed = true;}
                xywh {315 90 70 15} type Radio down_box DIAMOND_DOWN_BOX value 1 selection_color 2
              }
              Fl_Round_Button {btnRTTYafc[2]} {
                label Fast
                callback {progdefaults.rtty_afcspeed=2;
progdefaults.changed = true;}
                xywh {315 110 70 15} type Radio down_box DIAMOND_DOWN_BOX selection_color 2
              }
            }
            Fl_Check_Button btnPreferXhairScope {
              label {X hair scope}
              callback {progdefaults.PreferXhairScope=o->value();
progdefaults.changed = true;}
              xywh {265 155 120 15} down_box DOWN_BOX
              code0 {o->value(progdefaults.PreferXhairScope);}
            }
          }
        }
      }
    }
    Fl_Return_Button btnCloseConfig {
      label Close
      callback {closeDialog();}
      xywh {285 225 100 25}
    }
    Fl_Button btnSaveConfig {
      label {Save Config}
      callback {progdefaults.saveDefaults();}
      xywh {15 225 100 25}
    }
  }
} 

Function {openConfig()} {open return_type void
} {
  code {if (!dlgConfig) dlgConfig = ConfigureDialog();
progdefaults.loadDefaults();} {}
} 

Function {closeDialog()} {open return_type void
} {
  code {if (dlgConfig) dlgConfig->hide();} {}
} 

Function {createConfig()} {open return_type void
} {
  code {if (!dlgConfig) dlgConfig = ConfigureDialog();} {}
} 

// generated by Fast Light User Interface Designer (fluid) version 1.0109

#include "lgbook.h"
#include <config.h>
#include "logsupport.h"

Fl_Double_Window *wExport=(Fl_Double_Window *)0;

Fl_Check_Browser *chkExportBrowser=(Fl_Check_Browser *)0;

Fl_Button *btnClearAll=(Fl_Button *)0;

static void cb_btnClearAll(Fl_Button*, void*) {
  chkExportBrowser->check_none();
}

Fl_Button *btnCheckAll=(Fl_Button *)0;

static void cb_btnCheckAll(Fl_Button*, void*) {
  chkExportBrowser->check_all();
}

Fl_Return_Button *btnOK=(Fl_Return_Button *)0;

static void cb_btnOK(Fl_Return_Button*, void*) {
  wExport->hide();
Export_log();
}

Fl_Button *btnCancel=(Fl_Button *)0;

static void cb_btnCancel(Fl_Button*, void*) {
  wExport->hide();
}

Fl_Double_Window *dlgLogbook=(Fl_Double_Window *)0;

Fl_Group *editGroup=(Fl_Group *)0;

Fl_DateInput *inpDate_log=(Fl_DateInput *)0;

Fl_Input *inpTime_log=(Fl_Input *)0;

Fl_Input *inpCall_log=(Fl_Input *)0;

Fl_Input *inpName_log=(Fl_Input *)0;

Fl_Input *inpFreq_log=(Fl_Input *)0;

Fl_Input *inpMode_log=(Fl_Input *)0;

Fl_Input *inpRstR_log=(Fl_Input *)0;

Fl_Input *inpRstS_log=(Fl_Input *)0;

Fl_Input *inpQth_log=(Fl_Input *)0;

Fl_Input *inpLoc_log=(Fl_Input *)0;

Fl_Input *inpComment_log=(Fl_Input *)0;

Fl_DateInput *inpQSLrcvddate_log=(Fl_DateInput *)0;

Fl_DateInput *inpQSLsentdate_log=(Fl_DateInput *)0;

Fl_Button *bFirst=(Fl_Button *)0;

static void cb_bFirst(Fl_Button*, void*) {
  wBrowser->FirstRow ();
}

Fl_Repeat_Button *bPrev=(Fl_Repeat_Button *)0;

static void cb_bPrev(Fl_Repeat_Button*, void*) {
  wBrowser->PrevRow ();
}

Fl_Repeat_Button *bNext=(Fl_Repeat_Button *)0;

static void cb_bNext(Fl_Repeat_Button*, void*) {
  wBrowser->NextRow ();
}

Fl_Button *bLast=(Fl_Button *)0;

static void cb_bLast(Fl_Button*, void*) {
  wBrowser->LastRow ();
}

Fl_Button *bNewSave=(Fl_Button *)0;

Fl_Button *bUpdateCancel=(Fl_Button *)0;

Fl_Button *bDelete=(Fl_Button *)0;

Fl_Input *txtNbrRecs_log=(Fl_Input *)0;

Fl_Input *inpSerNoOut_log=(Fl_Input *)0;

Fl_Input *inpSerNoIn_log=(Fl_Input *)0;

Fl_Input *inpCnty_log=(Fl_Input *)0;

Fl_Input *inpVE_Prov_log=(Fl_Input *)0;

Fl_Input *inpSearchString=(Fl_Input *)0;

Fl_Button *bSearchFirst=(Fl_Button *)0;

Fl_Button *bSearchNext=(Fl_Button *)0;

Fl_Button *bSearchLast=(Fl_Button *)0;

Fl_Button *bDismiss=(Fl_Button *)0;

static void cb_bDismiss(Fl_Button*, void*) {
  dlgLogbook->hide();
}

Table *wBrowser=(Table *)0;

void create_logbook_dialogs() {
  { wExport = new Fl_Double_Window(380, 290, "Select Records to Export");
    { chkExportBrowser = new Fl_Check_Browser(5, 5, 370, 245);
    } // Fl_Check_Browser* chkExportBrowser
    { btnClearAll = new Fl_Button(5, 260, 70, 20, "Clear All");
      btnClearAll->callback((Fl_Callback*)cb_btnClearAll);
    } // Fl_Button* btnClearAll
    { btnCheckAll = new Fl_Button(85, 260, 70, 20, "Check All");
      btnCheckAll->callback((Fl_Callback*)cb_btnCheckAll);
    } // Fl_Button* btnCheckAll
    { btnOK = new Fl_Return_Button(290, 260, 84, 20, "OK");
      btnOK->callback((Fl_Callback*)cb_btnOK);
    } // Fl_Return_Button* btnOK
    { btnCancel = new Fl_Button(205, 260, 70, 20, "Cancel");
      btnCancel->callback((Fl_Callback*)cb_btnCancel);
    } // Fl_Button* btnCancel
    wExport->set_modal();
    wExport->end();
  } // Fl_Double_Window* wExport
  { dlgLogbook = new Fl_Double_Window(570, 325, "Logbook");
    dlgLogbook->color(FL_DARK1);
    { editGroup = new Fl_Group(0, 5, 570, 192);
      editGroup->box(FL_ENGRAVED_FRAME);
      editGroup->color(FL_LIGHT2);
      editGroup->labelsize(12);
      { inpDate_log = new Fl_DateInput(3, 22, 100, 22, "Date");
        inpDate_log->box(FL_DOWN_BOX);
        inpDate_log->color(FL_BACKGROUND2_COLOR);
        inpDate_log->selection_color(FL_SELECTION_COLOR);
        inpDate_log->labeltype(FL_NORMAL_LABEL);
        inpDate_log->labelfont(0);
        inpDate_log->labelsize(12);
        inpDate_log->labelcolor(FL_FOREGROUND_COLOR);
        inpDate_log->textfont(13);
        inpDate_log->textsize(12);
        inpDate_log->align(FL_ALIGN_TOP_LEFT);
        inpDate_log->when(FL_WHEN_RELEASE);
        inpDate_log->format(2);
      } // Fl_DateInput* inpDate_log
      { inpTime_log = new Fl_Input(105, 22, 40, 22, "Time");
        inpTime_log->labelsize(12);
        inpTime_log->textfont(13);
        inpTime_log->textsize(12);
        inpTime_log->align(FL_ALIGN_TOP_LEFT);
      } // Fl_Input* inpTime_log
      { inpCall_log = new Fl_Input(147, 22, 105, 22, "Call");
        inpCall_log->labelsize(12);
        inpCall_log->textfont(13);
        inpCall_log->textsize(12);
        inpCall_log->align(FL_ALIGN_TOP_LEFT);
      } // Fl_Input* inpCall_log
      { inpName_log = new Fl_Input(254, 22, 60, 22, "Name");
        inpName_log->labelsize(12);
        inpName_log->textfont(13);
        inpName_log->textsize(12);
        inpName_log->align(FL_ALIGN_TOP_LEFT);
      } // Fl_Input* inpName_log
      { inpFreq_log = new Fl_Input(315, 22, 80, 22, "Freq.");
        inpFreq_log->labelsize(12);
        inpFreq_log->textfont(13);
        inpFreq_log->textsize(12);
        inpFreq_log->align(FL_ALIGN_TOP_LEFT);
      } // Fl_Input* inpFreq_log
      { inpMode_log = new Fl_Input(396, 22, 80, 22, "Mode");
        inpMode_log->labelsize(12);
        inpMode_log->textfont(13);
        inpMode_log->textsize(12);
        inpMode_log->align(FL_ALIGN_TOP_LEFT);
      } // Fl_Input* inpMode_log
      { inpRstR_log = new Fl_Input(477, 22, 40, 22, "Rst-R");
        inpRstR_log->labelsize(12);
        inpRstR_log->textfont(13);
        inpRstR_log->textsize(12);
        inpRstR_log->align(FL_ALIGN_TOP_LEFT);
      } // Fl_Input* inpRstR_log
      { inpRstS_log = new Fl_Input(518, 22, 40, 22, "Rst-S");
        inpRstS_log->labelsize(12);
        inpRstS_log->textfont(13);
        inpRstS_log->textsize(12);
        inpRstS_log->align(FL_ALIGN_TOP_LEFT);
      } // Fl_Input* inpRstS_log
      { inpQth_log = new Fl_Input(3, 58, 135, 22, "Qth");
        inpQth_log->labelsize(12);
        inpQth_log->textfont(13);
        inpQth_log->textsize(12);
        inpQth_log->align(FL_ALIGN_TOP_LEFT);
      } // Fl_Input* inpQth_log
      { inpLoc_log = new Fl_Input(281, 58, 75, 22, "Loc");
        inpLoc_log->tooltip("Stations grid square");
        inpLoc_log->labelsize(12);
        inpLoc_log->textsize(12);
        inpLoc_log->align(FL_ALIGN_TOP_LEFT);
      } // Fl_Input* inpLoc_log
      { inpComment_log = new Fl_Input(3, 129, 440, 40, "Comment");
        inpComment_log->type(4);
        inpComment_log->labelsize(12);
        inpComment_log->textfont(13);
        inpComment_log->textsize(12);
        inpComment_log->align(FL_ALIGN_TOP_LEFT);
      } // Fl_Input* inpComment_log
      { Fl_DateInput* o = inpQSLrcvddate_log = new Fl_DateInput(357, 58, 100, 22, "QSL-rcvd");
        inpQSLrcvddate_log->box(FL_DOWN_BOX);
        inpQSLrcvddate_log->color(FL_BACKGROUND2_COLOR);
        inpQSLrcvddate_log->selection_color(FL_SELECTION_COLOR);
        inpQSLrcvddate_log->labeltype(FL_NORMAL_LABEL);
        inpQSLrcvddate_log->labelfont(0);
        inpQSLrcvddate_log->labelsize(12);
        inpQSLrcvddate_log->labelcolor(FL_FOREGROUND_COLOR);
        inpQSLrcvddate_log->textfont(13);
        inpQSLrcvddate_log->textsize(12);
        inpQSLrcvddate_log->align(FL_ALIGN_TOP_LEFT);
        inpQSLrcvddate_log->when(FL_WHEN_RELEASE);
        o->format(2);
      } // Fl_DateInput* inpQSLrcvddate_log
      { Fl_DateInput* o = inpQSLsentdate_log = new Fl_DateInput(458, 58, 100, 22, "QSL-sent");
        inpQSLsentdate_log->box(FL_DOWN_BOX);
        inpQSLsentdate_log->color((Fl_Color)55);
        inpQSLsentdate_log->selection_color((Fl_Color)1);
        inpQSLsentdate_log->labeltype(FL_NORMAL_LABEL);
        inpQSLsentdate_log->labelfont(0);
        inpQSLsentdate_log->labelsize(12);
        inpQSLsentdate_log->labelcolor(FL_FOREGROUND_COLOR);
        inpQSLsentdate_log->textfont(13);
        inpQSLsentdate_log->textsize(12);
        inpQSLsentdate_log->align(FL_ALIGN_TOP_LEFT);
        inpQSLsentdate_log->when(FL_WHEN_RELEASE);
        o->format(2);
      } // Fl_DateInput* inpQSLsentdate_log
      { bFirst = new Fl_Button(108, 171, 24, 22, "@|<");
        bFirst->color(FL_LIGHT1);
        bFirst->selection_color((Fl_Color)48);
        bFirst->labelsize(12);
        bFirst->callback((Fl_Callback*)cb_bFirst);
      } // Fl_Button* bFirst
      { bPrev = new Fl_Repeat_Button(142, 171, 24, 22, "@<");
        bPrev->color(FL_LIGHT1);
        bPrev->selection_color((Fl_Color)48);
        bPrev->labelsize(12);
        bPrev->callback((Fl_Callback*)cb_bPrev);
      } // Fl_Repeat_Button* bPrev
      { bNext = new Fl_Repeat_Button(176, 171, 24, 22, "@>");
        bNext->color(FL_LIGHT1);
        bNext->selection_color((Fl_Color)48);
        bNext->labelsize(12);
        bNext->callback((Fl_Callback*)cb_bNext);
      } // Fl_Repeat_Button* bNext
      { bLast = new Fl_Button(210, 171, 24, 22, "@>|");
        bLast->color(FL_LIGHT1);
        bLast->selection_color((Fl_Color)48);
        bLast->labelsize(12);
        bLast->callback((Fl_Callback*)cb_bLast);
      } // Fl_Button* bLast
      { bNewSave = new Fl_Button(247, 171, 55, 22, "New");
        bNewSave->shortcut(0x8004e);
        bNewSave->color(FL_LIGHT1);
        bNewSave->selection_color((Fl_Color)48);
        bNewSave->labelsize(12);
        bNewSave->callback((Fl_Callback*)cb_btnNewSave);
      } // Fl_Button* bNewSave
      { bUpdateCancel = new Fl_Button(317, 171, 55, 22, "Update");
        bUpdateCancel->shortcut(0x80055);
        bUpdateCancel->color(FL_LIGHT1);
        bUpdateCancel->selection_color((Fl_Color)48);
        bUpdateCancel->labelsize(12);
        bUpdateCancel->callback((Fl_Callback*)cb_btnUpdateCancel);
      } // Fl_Button* bUpdateCancel
      { bDelete = new Fl_Button(388, 171, 55, 22, "Delete");
        bDelete->shortcut(0x80044);
        bDelete->color(FL_LIGHT1);
        bDelete->selection_color((Fl_Color)48);
        bDelete->labelsize(12);
        bDelete->callback((Fl_Callback*)cb_btnDelete);
      } // Fl_Button* bDelete
      { txtNbrRecs_log = new Fl_Input(35, 171, 65, 22, "Recs");
        txtNbrRecs_log->color((Fl_Color)53);
        txtNbrRecs_log->labelsize(12);
        txtNbrRecs_log->textsize(12);
        txtNbrRecs_log->textcolor(4);
      } // Fl_Input* txtNbrRecs_log
      { inpSerNoOut_log = new Fl_Input(3, 93, 75, 22, "Ser# Sent");
        inpSerNoOut_log->tooltip("Contest seral # sent");
        inpSerNoOut_log->labelsize(12);
        inpSerNoOut_log->textsize(12);
        inpSerNoOut_log->align(FL_ALIGN_TOP_LEFT);
      } // Fl_Input* inpSerNoOut_log
      { inpSerNoIn_log = new Fl_Input(82, 93, 75, 22, "Ser# Rcvd");
        inpSerNoIn_log->tooltip("Contest serial # received");
        inpSerNoIn_log->labelsize(12);
        inpSerNoIn_log->textsize(12);
        inpSerNoIn_log->align(FL_ALIGN_TOP_LEFT);
      } // Fl_Input* inpSerNoIn_log
      { inpCnty_log = new Fl_Input(140, 58, 110, 22, "St. / Ctry.");
        inpCnty_log->labelsize(12);
        inpCnty_log->textfont(13);
        inpCnty_log->textsize(12);
        inpCnty_log->align(FL_ALIGN_TOP_LEFT);
      } // Fl_Input* inpCnty_log
      { inpVE_Prov_log = new Fl_Input(251, 58, 30, 22, "Pr..");
        inpVE_Prov_log->labelsize(12);
        inpVE_Prov_log->textfont(13);
        inpVE_Prov_log->textsize(12);
        inpVE_Prov_log->align(FL_ALIGN_TOP_LEFT);
      } // Fl_Input* inpVE_Prov_log
      { Fl_Group* o = new Fl_Group(445, 91, 116, 78);
        o->box(FL_ENGRAVED_FRAME);
        { inpSearchString = new Fl_Input(450, 114, 105, 22, "Call Search");
          inpSearchString->labelsize(12);
          inpSearchString->textfont(13);
          inpSearchString->textsize(12);
          inpSearchString->align(FL_ALIGN_TOP_LEFT);
        } // Fl_Input* inpSearchString
        { bSearchFirst = new Fl_Button(450, 139, 24, 22, "@|<");
          bSearchFirst->tooltip("Find first");
          bSearchFirst->color(FL_LIGHT1);
          bSearchFirst->selection_color((Fl_Color)48);
          bSearchFirst->labelsize(12);
          bSearchFirst->callback((Fl_Callback*)cb_btnSearchFirst);
        } // Fl_Button* bSearchFirst
        { bSearchNext = new Fl_Button(490, 139, 24, 22, "@>");
          bSearchNext->tooltip("Find Next");
          bSearchNext->color(FL_LIGHT1);
          bSearchNext->selection_color((Fl_Color)48);
          bSearchNext->labelfont(1);
          bSearchNext->labelsize(12);
          bSearchNext->callback((Fl_Callback*)cb_btnSearchNext);
        } // Fl_Button* bSearchNext
        { bSearchLast = new Fl_Button(531, 139, 24, 22, "@>|");
          bSearchLast->tooltip("Find Last");
          bSearchLast->color(FL_LIGHT1);
          bSearchLast->selection_color((Fl_Color)48);
          bSearchLast->labelfont(1);
          bSearchLast->labelsize(12);
          bSearchLast->callback((Fl_Callback*)cb_btnSearchLast);
        } // Fl_Button* bSearchLast
        o->end();
      } // Fl_Group* o
      { bDismiss = new Fl_Button(480, 171, 62, 22, "Dismiss");
        bDismiss->shortcut(0x80044);
        bDismiss->color(FL_LIGHT1);
        bDismiss->selection_color((Fl_Color)48);
        bDismiss->labelsize(12);
        bDismiss->callback((Fl_Callback*)cb_bDismiss);
      } // Fl_Button* bDismiss
      editGroup->end();
    } // Fl_Group* editGroup
    { wBrowser = new Table(2, 200, 565, 120);
      wBrowser->box(FL_DOWN_FRAME);
      wBrowser->color(FL_BACKGROUND2_COLOR);
      wBrowser->selection_color(FL_SELECTION_COLOR);
      wBrowser->labeltype(FL_NORMAL_LABEL);
      wBrowser->labelfont(0);
      wBrowser->labelsize(12);
      wBrowser->labelcolor(FL_FOREGROUND_COLOR);
      wBrowser->align(FL_ALIGN_TOP);
      wBrowser->when(FL_WHEN_RELEASE);
      wBrowser->end();
      Fl_Group::current()->resizable(wBrowser);
    } // Table* wBrowser
    dlgLogbook->end();
  } // Fl_Double_Window* dlgLogbook
  wBrowser->align (FL_ALIGN_TOP | FL_ALIGN_LEFT);
wBrowser->addColumn ("Date",85);
wBrowser->colcallback (0,cb_SortByDate);
wBrowser->addColumn ("Time",50);
wBrowser->addColumn ("Call",100);
wBrowser->colcallback (2,cb_SortByCall);
wBrowser->addColumn ("Name",110);
wBrowser->addColumn ("Freq",120);
wBrowser->colcallback (4,cb_SortByFreq);
wBrowser->addColumn ("Mode",90);
wBrowser->colcallback (5,cb_SortByMode);
wBrowser->addHiddenColumn ("rn");
wBrowser->allowSort(true);
wBrowser->callback(cb_browser);
wBrowser->when(FL_WHEN_CHANGED);
wBrowser->rowSize (19);
wBrowser->headerSize (18);
wBrowser->allowResize (1);
wBrowser->gridEnabled (1);
}

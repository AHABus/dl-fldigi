// generated by Fast Light User Interface Designer (fluid) version 1.0107

#include "CWdialog.h"
#include "trx.h"
extern trx *active_modem;
Fl_Double_Window *cwDialog = 0;

Fl_Light_Button *btnCWrcvTrack=(Fl_Light_Button *)0;

static void cb_btnCWrcvTrack(Fl_Light_Button*, void*) {
  active_modem->set_cwTrack(btnCWrcvTrack->value());
}

Fl_Light_Button *btnCWxmtLock=(Fl_Light_Button *)0;

static void cb_btnCWxmtLock(Fl_Light_Button*, void*) {
  active_modem->set_cwLock(btnCWxmtLock->value());
}

Fl_Button *CWDialogClose=(Fl_Button *)0;

static void cb_CWDialogClose(Fl_Button*, void*) {
  cwDialog->hide();
}

Fl_Progress *prgsCWrcvWPM=(Fl_Progress *)0;

Fl_Value_Slider *sldrCWxmtWPM=(Fl_Value_Slider *)0;

static void cb_sldrCWxmtWPM(Fl_Value_Slider*, void*) {
  active_modem->set_cwXmtWPM(sldrCWxmtWPM->value());
}

Fl_Value_Output *valCWrcvWPM=(Fl_Value_Output *)0;

Fl_Double_Window* CW_dialog() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = new Fl_Double_Window(330, 90, "CW Controls");
    w = o;
    { Fl_Light_Button* o = btnCWrcvTrack = new Fl_Light_Button(262, 18, 60, 20, "Track");
      o->value(1);
      o->callback((Fl_Callback*)cb_btnCWrcvTrack);
    }
    { Fl_Light_Button* o = btnCWxmtLock = new Fl_Light_Button(262, 40, 60, 20, "Lock");
      o->value(1);
      o->callback((Fl_Callback*)cb_btnCWxmtLock);
    }
    { Fl_Button* o = CWDialogClose = new Fl_Button(262, 65, 60, 20, "Close");
      o->callback((Fl_Callback*)cb_CWDialogClose);
    }
    { Fl_Progress* o = prgsCWrcvWPM = new Fl_Progress(42, 18, 217, 20, "WPM");
      o->color(FL_INACTIVE_COLOR);
      o->selection_color((Fl_Color)110);
      o->align(FL_ALIGN_TOP_LEFT);
    }
    { Fl_Value_Slider* o = sldrCWxmtWPM = new Fl_Value_Slider(6, 40, 254, 20, "Xmt Wpm");
      o->type(5);
      o->color((Fl_Color)17);
      o->minimum(5);
      o->maximum(60);
      o->step(1);
      o->value(20);
      o->textsize(14);
      o->callback((Fl_Callback*)cb_sldrCWxmtWPM);
      o->align(FL_ALIGN_BOTTOM_LEFT);
    }
    { Fl_Value_Output* o = valCWrcvWPM = new Fl_Value_Output(6, 18, 36, 20, "Rcv");
      o->color(FL_BACKGROUND2_COLOR);
      o->align(FL_ALIGN_TOP_LEFT);
    }
    o->end();
  }
  return w;
}

void createCWDialog() {
	if (!cwDialog)
		cwDialog = CW_dialog();
}

void openCWDialog() {
  if (!cwDialog) cwDialog = CW_dialog();
btnCWrcvTrack->value(active_modem->get_cwTrack());
btnCWxmtLock->value(active_modem->get_cwLock());
prgsCWrcvWPM->value(active_modem->get_cwRcvWPM());
valCWrcvWPM->value(active_modem->get_cwXmtWPM());
cwDialog->show();
}

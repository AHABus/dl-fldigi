# data file for the Fltk User Interface Designer (fluid)
version 1.0107 
header_name {.h} 
code_name {.cxx}
decl {\#include "modem.h"} {} 

decl {extern modem *active_modem;} {} 

decl {Fl_Double_Window *cwDialog = 0;} {} 

Function {CW_dialog()} {open
} {
  Fl_Window {} {
    label {CW Controls} open
    xywh {400 159 355 90} type Double visible
  } {
    Fl_Light_Button btnCWrcvTrack {
      label Track
      callback {active_modem->set_cwTrack(btnCWrcvTrack->value());}
      xywh {289 18 60 20} value 1
    }
    Fl_Light_Button btnCWxmtLock {
      label Lock
      callback {active_modem->set_cwLock(btnCWxmtLock->value());}
      xywh {289 40 60 20} value 1
    }
    Fl_Button CWDialogClose {
      label Close
      callback {cwDialog->hide();}
      xywh {289 62 60 20}
    }
    Fl_Progress prgsCWrcvWPM {
      label WPM
      xywh {69 18 217 20} color 8 selection_color 110 align 1
    }
    Fl_Value_Slider sldrCWxmtWPM {
      label Xmt
      callback {active_modem->set_cwXmtWPM(sldrCWxmtWPM->value());}
      xywh {33 40 254 20} type {Horz Knob} color 17 align 4 minimum 5 maximum 60 step 1 value 20 textsize 14
    }
    Fl_Value_Output valCWrcvWPM {
      label Rcv
      xywh {33 18 36 20} color 7
    }
    Fl_Value_Slider sldrCWbandwidth {
      label BW
      callback {if (active_modem->get_mode() == MODE_CW)
      active_modem->set_bandwidth(sldrCWbandwidth->value());} selected
      xywh {33 62 254 20} type {Horz Knob} color 23 align 4 minimum 50 maximum 250 step 10 value 150 textsize 14
    }
  }
} 

Function {openCWDialog()} {open return_type void
} {
  code {if (!cwDialog) cwDialog = CW_dialog();
btnCWrcvTrack->value(active_modem->get_cwTrack());
btnCWxmtLock->value(active_modem->get_cwLock());
prgsCWrcvWPM->value(active_modem->get_cwRcvWPM());
valCWrcvWPM->value(active_modem->get_cwXmtWPM());
cwDialog->show();} {}
} 

Function {createCWDialog()} {open return_type void
} {
  code {if (!cwDialog) cwDialog = CW_dialog();} {}
} 

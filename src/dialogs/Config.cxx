// generated by Fast Light User Interface Designer (fluid) version 1.0107

#include "Config.h"
#include <config.h>
#include "main.h"
#include "combo.h"
extern void initViewer();
Fl_Double_Window *dlgConfig;

Fl_Tabs *tabsConfigure=(Fl_Tabs *)0;

Fl_Group *tabOperator=(Fl_Group *)0;

static void cb_tabOperator(Fl_Group*, void*) {
  progdefaults.changed = true;
}

Fl_Input *inpMyCallsign=(Fl_Input *)0;

Fl_Input *inpMyName=(Fl_Input *)0;

static void cb_inpMyName(Fl_Input*, void*) {
  progdefaults.changed = true;
}

Fl_Input *inpMyQth=(Fl_Input *)0;

static void cb_inpMyQth(Fl_Input*, void*) {
  progdefaults.changed = true;
}

Fl_Input *inpMyLocator=(Fl_Input *)0;

static void cb_inpMyLocator(Fl_Input*, void*) {
  progdefaults.changed = true;
}

Fl_Check_Button *btnUseLeadingZeros=(Fl_Check_Button *)0;

static void cb_btnUseLeadingZeros(Fl_Check_Button* o, void*) {
  progdefaults.UseLeadingZeros = o->value();
progdefaults.changed = true;
}

Fl_Value_Input *nbrContestStart=(Fl_Value_Input *)0;

static void cb_nbrContestStart(Fl_Value_Input* o, void*) {
  progdefaults.ContestStart = (int)o->value();
progdefaults.changed = true;
}

Fl_Value_Input *nbrContestDigits=(Fl_Value_Input *)0;

static void cb_nbrContestDigits(Fl_Value_Input* o, void*) {
  progdefaults.ContestDigits = (int)o->value();
progdefaults.changed = true;
}

Fl_Group *tabWaterfall=(Fl_Group *)0;

Fl_Check_Button *btnBlackman=(Fl_Check_Button *)0;

static void cb_btnBlackman(Fl_Check_Button* o, void*) {
  if (o->value() == 1) {
progdefaults.wfPreFilter=1;
btnHamming->value(0);
btnHanning->value(0);
btnTriangular->value(0);
} else o->value(1);
progdefaults.changed = true;
}

Fl_Check_Button *btnHamming=(Fl_Check_Button *)0;

static void cb_btnHamming(Fl_Check_Button* o, void*) {
  if (o->value() == 1) {
progdefaults.wfPreFilter=2;
btnBlackman->value(0);
btnHanning->value(0);
btnTriangular->value(0);
} else o->value(1);
progdefaults.changed = true;
}

Fl_Check_Button *btnHanning=(Fl_Check_Button *)0;

static void cb_btnHanning(Fl_Check_Button* o, void*) {
  if (o->value() == 1) {
progdefaults.wfPreFilter=3;
btnHamming->value(0);
btnBlackman->value(0);
btnTriangular->value(0);
} else o->value(1);
progdefaults.changed = true;
}

Fl_Check_Button *btnTriangular=(Fl_Check_Button *)0;

static void cb_btnTriangular(Fl_Check_Button* o, void*) {
  if (o->value() == 1) {
progdefaults.wfPreFilter=4;
btnHamming->value(0);
btnHanning->value(0);
btnBlackman->value(0);
} else o->value(1);
progdefaults.changed = true;
}

Fl_Counter *cntLowFreqCutoff=(Fl_Counter *)0;

static void cb_cntLowFreqCutoff(Fl_Counter* o, void*) {
  progdefaults.LowFreqCutoff=(int)(o->value());
progdefaults.changed = true;
}

colorbox *Palette=(colorbox *)0;

static void cb_Palette(colorbox*, void*) {
  progdefaults.changed = true;
}

static void cb_btnColor(Fl_Button*, void*) {
  selectColor(0);
progdefaults.changed = true;
}

static void cb_btnColor1(Fl_Button*, void*) {
  selectColor(1);
progdefaults.changed = true;
}

static void cb_btnColor2(Fl_Button*, void*) {
  selectColor(2);
progdefaults.changed = true;
}

static void cb_btnColor3(Fl_Button*, void*) {
  selectColor(3);
progdefaults.changed = true;
}

static void cb_btnColor4(Fl_Button*, void*) {
  selectColor(4);
progdefaults.changed = true;
}

static void cb_btnColor5(Fl_Button*, void*) {
  selectColor(5);
progdefaults.changed = true;
}

static void cb_btnColor6(Fl_Button*, void*) {
  selectColor(6);
progdefaults.changed = true;
}

static void cb_btnColor7(Fl_Button*, void*) {
  selectColor(7);
progdefaults.changed = true;
}

Fl_Button *btnColor[9]={(Fl_Button *)0};

static void cb_btnColor8(Fl_Button*, void*) {
  selectColor(8);
progdefaults.changed = true;
}

Fl_Button *btnLoadPalette=(Fl_Button *)0;

static void cb_btnLoadPalette(Fl_Button*, void*) {
  loadPalette();
progdefaults.changed = true;
}

Fl_Button *btnSavePalette=(Fl_Button *)0;

static void cb_btnSavePalette(Fl_Button*, void*) {
  savePalette();
}

Fl_Check_Button *btnUseCursorLines=(Fl_Check_Button *)0;

static void cb_btnUseCursorLines(Fl_Check_Button* o, void*) {
  progdefaults.UseCursorLines = o->value();
progdefaults.changed = true;
}

Fl_Check_Button *btnUseBWTracks=(Fl_Check_Button *)0;

static void cb_btnUseBWTracks(Fl_Check_Button* o, void*) {
  progdefaults.UseBWTracks = o->value();
progdefaults.changed = true;
}

Fl_Check_Button *btnUseCursorCenterLine=(Fl_Check_Button *)0;

static void cb_btnUseCursorCenterLine(Fl_Check_Button* o, void*) {
  progdefaults.UseCursorCenterLine = o->value();
progdefaults.changed = true;
}

Fl_Button *btnCursorBWcolor=(Fl_Button *)0;

static void cb_btnCursorBWcolor(Fl_Button* o, void*) {
  if (fl_color_chooser("Cursor BW Lines",
  progdefaults.cursorLineRGBI.R, 
  progdefaults.cursorLineRGBI.G, 
  progdefaults.cursorLineRGBI.B) ) {
o->color(fl_rgb_color(progdefaults.cursorLineRGBI.R,progdefaults.cursorLineRGBI.G,progdefaults.cursorLineRGBI.B));
o->redraw();
progdefaults.changed = true;
};
}

Fl_Button *btnCursorCenterLineColor=(Fl_Button *)0;

static void cb_btnCursorCenterLineColor(Fl_Button* o, void*) {
  if (fl_color_chooser("Cursor Center Line",
  progdefaults.cursorCenterRGBI.R, 
  progdefaults.cursorCenterRGBI.G, 
  progdefaults.cursorCenterRGBI.B) ) {
o->color(fl_rgb_color(progdefaults.cursorCenterRGBI.R,progdefaults.cursorCenterRGBI.G,progdefaults.cursorCenterRGBI.B));
o->redraw();
progdefaults.changed = true;
};
}

Fl_Button *btnBwTracksColor=(Fl_Button *)0;

static void cb_btnBwTracksColor(Fl_Button* o, void*) {
  if (fl_color_chooser("Track Lines",
  progdefaults.bwTrackRGBI.R, 
  progdefaults.bwTrackRGBI.G, 
  progdefaults.bwTrackRGBI.B) ) {
o->color(fl_rgb_color(progdefaults.bwTrackRGBI.R,progdefaults.bwTrackRGBI.G,progdefaults.bwTrackRGBI.B));
o->redraw();
progdefaults.changed = true;
};
}

Fl_Group *tabVideo=(Fl_Group *)0;

Fl_Check_Button *btnsendid=(Fl_Check_Button *)0;

static void cb_btnsendid(Fl_Check_Button* o, void*) {
  progdefaults.sendid=o->value();
progdefaults.changed = true;
}

Fl_Check_Button *btnsendvideotext=(Fl_Check_Button *)0;

static void cb_btnsendvideotext(Fl_Check_Button* o, void*) {
  progdefaults.sendtextid=o->value();
progdefaults.changed = true;
}

Fl_Input *valVideotext=(Fl_Input *)0;

static void cb_valVideotext(Fl_Input* o, void*) {
  progdefaults.strTextid = o->value();
progdefaults.changed = true;
}

Fl_Value_Slider *sldrVideowidth=(Fl_Value_Slider *)0;

static void cb_sldrVideowidth(Fl_Value_Slider* o, void*) {
  progdefaults.videowidth = (int)o->value();
progdefaults.changed = true;
}

Fl_Check_Button *btnViewXmtSignal=(Fl_Check_Button *)0;

static void cb_btnViewXmtSignal(Fl_Check_Button* o, void*) {
  progdefaults.viewXmtSignal=o->value();
progdefaults.changed = true;
}

Fl_Group *sld=(Fl_Group *)0;

Fl_Check_Button *btnCWID=(Fl_Check_Button *)0;

static void cb_btnCWID(Fl_Check_Button* o, void*) {
  progdefaults.CWid = o->value();
progdefaults.changed = true;
}

Fl_Value_Slider *sldrCWIDwpm=(Fl_Value_Slider *)0;

static void cb_sldrCWIDwpm(Fl_Value_Slider* o, void*) {
  progdefaults.CWIDwpm = (int)o->value();
progdefaults.changed = true;
}

Fl_Group *tabRig=(Fl_Group *)0;

static void cb_btnPTT(Fl_Round_Button* o, void*) {
  btnPTT[1]->value(0);
btnPTT[2]->value(0);
btnPTT[3]->value(0);
btnPTT[4]->value(0);
o->value(1);
progdefaults.changed = true;
}

Fl_Input *inpTTYdev=(Fl_Input *)0;

static void cb_inpTTYdev(Fl_Input*, void*) {
  progdefaults.changed = true;
}

Fl_Round_Button *btnRTSptt=(Fl_Round_Button *)0;

static void cb_btnRTSptt(Fl_Round_Button*, void*) {
  progdefaults.changed = true;
}

Fl_Round_Button *btnDTRptt=(Fl_Round_Button *)0;

static void cb_btnDTRptt(Fl_Round_Button*, void*) {
  progdefaults.changed = true;
}

Fl_Round_Button *btnRTSplusV=(Fl_Round_Button *)0;

static void cb_btnRTSplusV(Fl_Round_Button*, void*) {
  progdefaults.changed = true;
}

Fl_Round_Button *btnDTRplusV=(Fl_Round_Button *)0;

static void cb_btnDTRplusV(Fl_Round_Button*, void*) {
  progdefaults.changed = true;
}

Fl_Round_Button *btnPTT[5]={(Fl_Round_Button *)0};

static void cb_btnPTT1(Fl_Round_Button* o, void*) {
  btnPTT[0]->value(0);
btnPTT[1]->value(0);
btnPTT[2]->value(0);
btnPTT[3]->value(0);
o->value(1);
progdefaults.changed = true;
}

Fl_Check_Button *chkUSERIGCAT=(Fl_Check_Button *)0;

static void cb_chkUSERIGCAT(Fl_Check_Button* o, void*) {
  if (o->value() == 1) {
  chkUSEHAMLIB->value(0);
  chkUSEMEMMAP->value(0);
  btnPTT[1]->value(0);
  btnPTT[1]->deactivate();
  btnPTT[2]->value(0);
  btnPTT[2]->deactivate();
  btnPTT[3]->activate();
  cboHamlibRig->deactivate();
  inpRIGdev->deactivate();
  mnuBaudRate->deactivate();
  } else {
  if (btnPTT[3]->value() == 1)
  	btnPTT[0]->value(1);
  btnPTT[3]->value(0);
  btnPTT[3]->deactivate();
  }
for (int i = 0; i < 4; btnPTT[i++]->redraw());
progdefaults.changed = true;
}

static void cb_btnPTT2(Fl_Round_Button* o, void*) {
  btnPTT[0]->value(0);
btnPTT[1]->value(0);
btnPTT[2]->value(0);
btnPTT[4]->value(0);
o->value(1);
progdefaults.changed = true;
}

Fl_Check_Button *chkUSEHAMLIB=(Fl_Check_Button *)0;

static void cb_chkUSEHAMLIB(Fl_Check_Button* o, void*) {
  if (o->value() == 1) {
  chkUSEMEMMAP->value(0);
  chkUSERIGCAT->value(0);
  btnPTT[3]->value(0);
  btnPTT[3]->deactivate();
  btnPTT[2]->value(0);
  btnPTT[2]->deactivate();
  btnPTT[1]->activate();
  cboHamlibRig->activate();
  inpRIGdev->activate();
  mnuBaudRate->activate();
  } else {
  if (btnPTT[1]->value()==1)
 	btnPTT[0]->value(1);
  btnPTT[1]->value(0);
  btnPTT[1]->deactivate();
  cboHamlibRig->deactivate();
  inpRIGdev->deactivate();
  mnuBaudRate->deactivate();
  }
for (int i = 0; i < 4; btnPTT[i++]->redraw());
progdefaults.changed = true;
}

Fl_ComboBox *cboHamlibRig=(Fl_ComboBox *)0;

static void cb_cboHamlibRig(Fl_ComboBox*, void*) {
  progdefaults.changed = true;
}

Fl_Input *inpRIGdev=(Fl_Input *)0;

static void cb_inpRIGdev(Fl_Input*, void*) {
  progdefaults.changed = true;
}

Fl_Choice *mnuBaudRate=(Fl_Choice *)0;

static void cb_mnuBaudRate(Fl_Choice*, void*) {
  progdefaults.changed = true;
}

static void cb_btnPTT3(Fl_Round_Button* o, void*) {
  btnPTT[0]->value(0);
btnPTT[2]->value(0);
btnPTT[3]->value(0);
btnPTT[4]->value(0);
o->value(1);
progdefaults.changed = true;
}

Fl_Check_Button *chkUSEMEMMAP=(Fl_Check_Button *)0;

static void cb_chkUSEMEMMAP(Fl_Check_Button* o, void*) {
  if(o->value() == 1){
  chkUSEHAMLIB->value(0);
  chkUSERIGCAT->value(0);
  btnPTT[3]->value(0);
  btnPTT[3]->deactivate();
  btnPTT[1]->value(0);
  btnPTT[1]->deactivate();
  btnPTT[2]->activate();
  cboHamlibRig->deactivate();
  inpRIGdev->deactivate();
  mnuBaudRate->deactivate();
  } else {
  if (btnPTT[2]->value()==1)
  	btnPTT[0]->value(1);
  btnPTT[2]->value(0);
  btnPTT[2]->deactivate();
  }
for (int i = 0; i < 4; btnPTT[i++]->redraw());  
progdefaults.changed = true;
}

static void cb_btnPTT4(Fl_Round_Button* o, void*) {
  btnPTT[0]->value(0);
btnPTT[1]->value(0);
btnPTT[3]->value(0);
btnPTT[4]->value(0);
o->value(1);
progdefaults.changed = true;
}

Fl_Button *btnInit_Interface=(Fl_Button *)0;

static void cb_btnInit_Interface(Fl_Button*, void*) {
  progdefaults.initInterface();
progdefaults.changed = true;
}

Fl_Group *tabQRZ=(Fl_Group *)0;

Fl_Check_Button *btnQRZnotavailable=(Fl_Check_Button *)0;

static void cb_btnQRZnotavailable(Fl_Check_Button* o, void*) {
  if (o->value() == 1) {
btnQRZcdrom->value(0);
btnQRZsocket->value(0);
progdefaults.QRZ = 0;
}
progdefaults.changed = true;
}

Fl_Check_Button *btnQRZsocket=(Fl_Check_Button *)0;

static void cb_btnQRZsocket(Fl_Check_Button* o, void*) {
  if (o->value() == 1) {
btnQRZcdrom->value(0);
btnQRZnotavailable->value(0);
progdefaults.QRZ = 1;
}
progdefaults.changed = true;
}

Fl_Check_Button *btnQRZcdrom=(Fl_Check_Button *)0;

static void cb_btnQRZcdrom(Fl_Check_Button* o, void*) {
  if (o->value() == 1) {
btnQRZsocket->value(0);
btnQRZnotavailable->value(0);
progdefaults.QRZ = 2;
}
progdefaults.changed = true;
}

Fl_Input *inpQRZusername=(Fl_Input *)0;

static void cb_inpQRZusername(Fl_Input* o, void*) {
  progdefaults.QRZusername = o->value();
progdefaults.changed = true;
}

Fl_Input *inpQRZuserpassword=(Fl_Input *)0;

static void cb_inpQRZuserpassword(Fl_Input* o, void*) {
  progdefaults.QRZuserpassword = o->value();
progdefaults.changed = true;
}

Fl_Button *btnQRZpasswordShow=(Fl_Button *)0;

static void cb_btnQRZpasswordShow(Fl_Button* o, void*) {
  inpQRZuserpassword->type(inpQRZuserpassword->type() ^ FL_SECRET_INPUT);
inpQRZuserpassword->redraw();
o->label((inpQRZuserpassword->type() & FL_SECRET_INPUT) ? "Show" : "Hide");
}

Fl_Group *tabSoundCard=(Fl_Group *)0;

Fl_Tabs *tabsSoundCard=(Fl_Tabs *)0;

Fl_Group *tabAudio=(Fl_Group *)0;

Fl_Spinner *cntRxRateCorr=(Fl_Spinner *)0;

static void cb_cntRxRateCorr(Fl_Spinner* o, void*) {
  progdefaults.RX_corr = (int)o->value();
progdefaults.changed = true;
}

Fl_Spinner *cntTxRateCorr=(Fl_Spinner *)0;

static void cb_cntTxRateCorr(Fl_Spinner* o, void*) {
  progdefaults.TX_corr = (int)o->value();
progdefaults.changed = true;
}

Fl_Spinner *cntTxOffset=(Fl_Spinner *)0;

static void cb_cntTxOffset(Fl_Spinner* o, void*) {
  progdefaults.TxOffset = (int)o->value();
progdefaults.changed = true;
}

Fl_Group *AudioIO=(Fl_Group *)0;

static void cb_btnAudioIO(Fl_Round_Button* o, void*) {
  btnAudioIO[1]->value(0);
o->value(1);
menuOSSDev->activate();
menuPADev->deactivate();
menuSampleRate->deactivate();
scDevice = menuOSSDev->value();
progdefaults.btnAudioIOis = 0;
progdefaults.changed = true;
resetSoundCard();
}

Fl_Round_Button *btnAudioIO[2]={(Fl_Round_Button *)0};

static void cb_btnAudioIO1(Fl_Round_Button* o, void*) {
  btnAudioIO[0]->value(0);
o->value(1);
menuPADev->activate();
menuOSSDev->deactivate();
menuSampleRate->activate();
scDevice = menuPADev->value();
progdefaults.btnAudioIOis = 1;
progdefaults.changed = true;
resetSoundCard();
}

Fl_Input_Choice *menuOSSDev=(Fl_Input_Choice *)0;

static void cb_menuOSSDev(Fl_Input_Choice* o, void*) {
  scDevice = progdefaults.OSSdevice = o->value();
resetSoundCard();
progdefaults.changed = true;
}

Fl_Input_Choice *menuPADev=(Fl_Input_Choice *)0;

static void cb_menuPADev(Fl_Input_Choice* o, void*) {
  scDevice = progdefaults.PAdevice = o->value();
resetSoundCard();
progdefaults.changed = true;
}

Fl_Choice *menuSampleRate=(Fl_Choice *)0;

static void cb_menuSampleRate(Fl_Choice* o, void*) {
  progdefaults.sample_rate = o->value() > 1 ? strtol(o->mvalue()->text, 0, 10) : o->value();
resetSoundCard();
progdefaults.changed = true;
}

Fl_Group *tabMixer=(Fl_Group *)0;

Fl_Light_Button *btnLineIn=(Fl_Light_Button *)0;

static void cb_btnLineIn(Fl_Light_Button* o, void*) {
  if (o->value() == 1) {
    btnMicIn->value(0);
    progdefaults.LineIn = true;
    progdefaults.MicIn = false;
    setMixerInput(1);
} else {
    setMixerInput(0);
    progdefaults.LineIn = false;
}
progdefaults.changed = true;
}

Fl_Light_Button *btnMicIn=(Fl_Light_Button *)0;

static void cb_btnMicIn(Fl_Light_Button* o, void*) {
  if (o->value() == 1) {
    btnLineIn->value(0);
    progdefaults.LineIn = false;
    progdefaults.MicIn = true;
    setMixerInput(2);
} else {
    setMixerInput(0);
    progdefaults.MicIn = false;
}
progdefaults.changed = true;
}

Fl_Value_Slider *valPCMvolume=(Fl_Value_Slider *)0;

static void cb_valPCMvolume(Fl_Value_Slider* o, void*) {
  setPCMvolume(o->value());
progdefaults.changed = true;
}

Fl_Input_Choice *menuMix=(Fl_Input_Choice *)0;

static void cb_menuMix(Fl_Input_Choice* o, void*) {
  progdefaults.MXdevice = o->value();
enableMixer(false);
enableMixer(true);
progdefaults.changed = true;
}

Fl_Check_Button *btnMixer=(Fl_Check_Button *)0;

static void cb_btnMixer(Fl_Check_Button* o, void*) {
  enableMixer(o->value());
progdefaults.changed = true;
}

Fl_Group *tabMisc=(Fl_Group *)0;

Fl_Value_Input *valCWsweetspot=(Fl_Value_Input *)0;

static void cb_valCWsweetspot(Fl_Value_Input* o, void*) {
  progdefaults.CWsweetspot=o->value();
progdefaults.changed = true;
}

Fl_Value_Input *valRTTYsweetspot=(Fl_Value_Input *)0;

static void cb_valRTTYsweetspot(Fl_Value_Input* o, void*) {
  progdefaults.RTTYsweetspot=o->value();
progdefaults.changed = true;
}

Fl_Value_Input *valPSKsweetspot=(Fl_Value_Input *)0;

static void cb_valPSKsweetspot(Fl_Value_Input* o, void*) {
  progdefaults.PSKsweetspot=o->value();
progdefaults.changed = true;
}

Fl_Check_Button *btnStartAtSweetSpot=(Fl_Check_Button *)0;

static void cb_btnStartAtSweetSpot(Fl_Check_Button* o, void*) {
  progdefaults.StartAtSweetSpot = o->value();
progdefaults.changed = true;
}

Fl_Check_Button *btntextwidgets=(Fl_Check_Button *)0;

static void cb_btntextwidgets(Fl_Check_Button* o, void*) {
  progdefaults.alt_text_widgets = o->value();
progdefaults.changed = true;
}

Fl_Group *tabModems=(Fl_Group *)0;

Fl_Tabs *tabsModems=(Fl_Tabs *)0;

Fl_Group *tabCW=(Fl_Group *)0;

Fl_Value_Slider *sldrCWbandwidth=(Fl_Value_Slider *)0;

static void cb_sldrCWbandwidth(Fl_Value_Slider* o, void*) {
  progdefaults.CWbandwidth = (int)o->value();
progdefaults.changed = true;
}

Fl_Counter *cntCWrange=(Fl_Counter *)0;

static void cb_cntCWrange(Fl_Counter* o, void*) {
  progdefaults.CWrange = (int)o->value();
progdefaults.changed = true;
}

Fl_Check_Button *btnCWrcvTrack=(Fl_Check_Button *)0;

static void cb_btnCWrcvTrack(Fl_Check_Button* o, void*) {
  progdefaults.CWtrack = o->value();
progdefaults.changed = true;
}

Fl_Value_Output *valCWrcvWPM=(Fl_Value_Output *)0;

static void cb_valCWrcvWPM(Fl_Value_Output*, void*) {
  progdefaults.changed = true;
}

Fl_Progress *prgsCWrcvWPM=(Fl_Progress *)0;

Fl_Value_Slider *sldrCWxmtWPM=(Fl_Value_Slider *)0;

static void cb_sldrCWxmtWPM(Fl_Value_Slider* o, void*) {
  progdefaults.CWspeed = (int)o->value();
cntPreTiming->maximum((int)(2400/o->value())/2.0);
cntPostTiming->maximum((int)(2400/o->value())/2.0);
progdefaults.changed = true;
}

Fl_Counter *cntCWlowerlimit=(Fl_Counter *)0;

static void cb_cntCWlowerlimit(Fl_Counter* o, void*) {
  progdefaults.CWlowerlimit = (int)o->value();
progdefaults.changed = true;
sldrCWxmtWPM->minimum(o->value());
sldrCWxmtWPM->value(progdefaults.CWspeed);
sldrCWxmtWPM->redraw();
cntCWupperlimit->minimum(o->value()+20);
}

Fl_Counter *cntCWupperlimit=(Fl_Counter *)0;

static void cb_cntCWupperlimit(Fl_Counter* o, void*) {
  progdefaults.CWupperlimit = (int)o->value();
progdefaults.changed = true;
sldrCWxmtWPM->maximum(o->value());
sldrCWxmtWPM->value(progdefaults.CWspeed);
sldrCWxmtWPM->redraw();
cntCWlowerlimit->maximum(o->value()-20);
}

Fl_Counter *cntCWweight=(Fl_Counter *)0;

static void cb_cntCWweight(Fl_Counter* o, void*) {
  progdefaults.CWweight=(int)o->value();
progdefaults.changed = true;
}

Fl_Counter *cntCWdash2dot=(Fl_Counter *)0;

static void cb_cntCWdash2dot(Fl_Counter* o, void*) {
  progdefaults.CWdash2dot=o->value();
progdefaults.changed = true;
}

Fl_Counter *cntCWrisetime=(Fl_Counter *)0;

static void cb_cntCWrisetime(Fl_Counter* o, void*) {
  progdefaults.CWrisetime=o->value();
progdefaults.changed = true;
}

Fl_Counter *cntCWdefWPM=(Fl_Counter *)0;

static void cb_cntCWdefWPM(Fl_Counter* o, void*) {
  progdefaults.defCWspeed = (int)o->value();
progdefaults.changed = true;
}

Fl_Group *tabCWQSK=(Fl_Group *)0;

Fl_Check_Button *btnQSK=(Fl_Check_Button *)0;

static void cb_btnQSK(Fl_Check_Button* o, void*) {
  progdefaults.QSK=o->value();
progdefaults.changed = true;
}

Fl_Counter *cntPreTiming=(Fl_Counter *)0;

static void cb_cntPreTiming(Fl_Counter* o, void*) {
  progdefaults.CWpre=o->value();
progdefaults.changed = true;
}

Fl_Counter *cntPostTiming=(Fl_Counter *)0;

static void cb_cntPostTiming(Fl_Counter* o, void*) {
  progdefaults.CWpost=o->value();
progdefaults.changed = true;
}

Fl_Group *tabDomEX=(Fl_Group *)0;

Fl_Input *txtSecondary=(Fl_Input *)0;

static void cb_txtSecondary(Fl_Input*, void*) {
  progdefaults.changed = true;
}

Fl_Button *btnRestartDomEX=(Fl_Button *)0;

static void cb_btnRestartDomEX(Fl_Button*, void*) {
  progdefaults.storeDefaults();
resetDOMEX();
}

Fl_Counter *valDominoEX_BW=(Fl_Counter *)0;

static void cb_valDominoEX_BW(Fl_Counter* o, void*) {
  progdefaults.DOMINOEX_BW=o->value();
progdefaults.changed = true;
}

Fl_Group *tabFeld=(Fl_Group *)0;

Fl_Choice *selHellFont=(Fl_Choice *)0;

static void cb_selHellFont(Fl_Choice* o, void*) {
  progdefaults.feldfontnbr=o->value();
progdefaults.changed = true;
}

Fl_Value_Slider *sldrHellBW=(Fl_Value_Slider *)0;

static void cb_sldrHellBW(Fl_Value_Slider*, void*) {
  if (active_modem->get_mode() == MODE_FELDHELL)
      active_modem->set_bandwidth(sldrHellBW->value());
progdefaults.changed = true;
}

Fl_Check_Button *btnHellXmtWidth=(Fl_Check_Button *)0;

static void cb_btnHellXmtWidth(Fl_Check_Button*, void*) {
  progdefaults.changed = true;
}

Fl_Check_Button *btnHellRcvWidth=(Fl_Check_Button *)0;

static void cb_btnHellRcvWidth(Fl_Check_Button*, void*) {
  progdefaults.changed = true;
}

Fl_Check_Button *btnBlackboard=(Fl_Check_Button *)0;

static void cb_btnBlackboard(Fl_Check_Button*, void*) {
  progdefaults.changed = true;
}

Fl_Check_Button *btnHellFastAttack=(Fl_Check_Button *)0;

static void cb_btnHellFastAttack(Fl_Check_Button* o, void*) {
  if (o->value() == 1)
btnHellSlowAttack->value(0);
else
btnHellSlowAttack->value(1);
progdefaults.changed = true;
}

Fl_Check_Button *btnHellSlowAttack=(Fl_Check_Button *)0;

static void cb_btnHellSlowAttack(Fl_Check_Button* o, void*) {
  if (o->value() == 1)
btnHellFastAttack->value(0);
else
btnHellFastAttack->value(1);
progdefaults.changed = true;
}

Fl_Check_Button *btnFeldHellIdle=(Fl_Check_Button *)0;

static void cb_btnFeldHellIdle(Fl_Check_Button* o, void*) {
  progdefaults.FELD_IDLE=o->value();
progdefaults.changed = true;
}

Fl_Group *tabOlivia=(Fl_Group *)0;

Fl_Choice *mnuOlivia_Tones=(Fl_Choice *)0;

static void cb_mnuOlivia_Tones(Fl_Choice*, void*) {
  progdefaults.changed = true;
}

Fl_Choice *mnuOlivia_Bandwidth=(Fl_Choice *)0;

static void cb_mnuOlivia_Bandwidth(Fl_Choice*, void*) {
  progdefaults.changed = true;
}

Fl_Button *btnRestartOlivia=(Fl_Button *)0;

static void cb_btnRestartOlivia(Fl_Button*, void*) {
  progdefaults.storeDefaults();
resetOLIVIA();
progdefaults.changed = true;
}

Fl_Counter *cntOlivia_smargin=(Fl_Counter *)0;

static void cb_cntOlivia_smargin(Fl_Counter*, void*) {
  progdefaults.changed = true;
}

Fl_Counter *cntOlivia_sinteg=(Fl_Counter *)0;

static void cb_cntOlivia_sinteg(Fl_Counter*, void*) {
  progdefaults.changed = true;
}

Fl_Group *tabPSK=(Fl_Group *)0;

Fl_Counter *cntSearchRange=(Fl_Counter *)0;

static void cb_cntSearchRange(Fl_Counter* o, void*) {
  progdefaults.SearchRange = (int)o->value();
wf->redraw_marker();
progdefaults.changed = true;
}

Fl_Check_Button *btnPSKmailSweetSpot=(Fl_Check_Button *)0;

static void cb_btnPSKmailSweetSpot(Fl_Check_Button* o, void*) {
  progdefaults.PSKmailSweetSpot = o->value();
progdefaults.changed = true;
}

Fl_Counter *cntServerOffset=(Fl_Counter *)0;

static void cb_cntServerOffset(Fl_Counter* o, void*) {
  progdefaults.ServerOffset = (int)o->value();
wf->redraw_marker();
progdefaults.changed = true;
}

Fl_Check_Button *btnMarquee=(Fl_Check_Button *)0;

static void cb_btnMarquee(Fl_Check_Button* o, void*) {
  progdefaults.VIEWERmarquee = o->value();
progdefaults.changed = true;
initViewer();
}

Fl_Check_Button *btnShowFrequencies=(Fl_Check_Button *)0;

static void cb_btnShowFrequencies(Fl_Check_Button* o, void*) {
  progdefaults.VIEWERshowfreq = o->value();
progdefaults.changed = true;
initViewer();
}

Fl_Spinner *cntStartFrequency=(Fl_Spinner *)0;

static void cb_cntStartFrequency(Fl_Spinner* o, void*) {
  progdefaults.VIEWERstart = (int)(o->value());
progdefaults.changed = true;
initViewer();
}

Fl_Spinner *cntChannels=(Fl_Spinner *)0;

static void cb_cntChannels(Fl_Spinner* o, void*) {
  progdefaults.VIEWERchannels = (int)(o->value());
progdefaults.changed = true;
initViewer();
}

Fl_Group *tabRTTY=(Fl_Group *)0;

Fl_Choice *selShift=(Fl_Choice *)0;

static void cb_selShift(Fl_Choice*, void*) {
  progdefaults.changed = true;
}

Fl_Choice *selBaud=(Fl_Choice *)0;

static void cb_selBaud(Fl_Choice*, void*) {
  progdefaults.changed = true;
}

Fl_Choice *selBits=(Fl_Choice *)0;

static void cb_selBits(Fl_Choice*, void*) {
  progdefaults.changed = true;
}

Fl_Choice *selParity=(Fl_Choice *)0;

static void cb_selParity(Fl_Choice*, void*) {
  progdefaults.changed = true;
}

Fl_Choice *selStopBits=(Fl_Choice *)0;

static void cb_selStopBits(Fl_Choice*, void*) {
  progdefaults.changed = true;
}

Fl_Check_Button *chkPseudoFSK=(Fl_Check_Button *)0;

static void cb_chkPseudoFSK(Fl_Check_Button* o, void*) {
  progdefaults.PseudoFSK = o->value();
progdefaults.changed = true;
}

Fl_Button *btnRestartRtty=(Fl_Button *)0;

static void cb_btnRestartRtty(Fl_Button*, void*) {
  progdefaults.storeDefaults();
resetRTTY();
}

Fl_Check_Button *btnCRCRLF=(Fl_Check_Button *)0;

static void cb_btnCRCRLF(Fl_Check_Button*, void*) {
  progdefaults.changed = true;
}

Fl_Check_Button *btnAUTOCRLF=(Fl_Check_Button *)0;

static void cb_btnAUTOCRLF(Fl_Check_Button*, void*) {
  progdefaults.changed = true;
}

Fl_Counter *cntrAUTOCRLF=(Fl_Counter *)0;

static void cb_cntrAUTOCRLF(Fl_Counter*, void*) {
  progdefaults.changed = true;
}

Fl_Check_Button *btnRTTY_USB=(Fl_Check_Button *)0;

static void cb_btnRTTY_USB(Fl_Check_Button* o, void*) {
  progdefaults.RTTY_USB = o->value();
progdefaults.changed = true;
}

static void cb_btnRTTYafc(Fl_Round_Button*, void*) {
  progdefaults.rtty_afcspeed=0;
progdefaults.changed = true;
}

static void cb_btnRTTYafc1(Fl_Round_Button*, void*) {
  progdefaults.rtty_afcspeed=1;
progdefaults.changed = true;
}

Fl_Round_Button *btnRTTYafc[3]={(Fl_Round_Button *)0};

static void cb_btnRTTYafc2(Fl_Round_Button*, void*) {
  progdefaults.rtty_afcspeed=2;
progdefaults.changed = true;
}

Fl_Check_Button *btnPreferXhairScope=(Fl_Check_Button *)0;

static void cb_btnPreferXhairScope(Fl_Check_Button* o, void*) {
  progdefaults.PreferXhairScope=o->value();
progdefaults.changed = true;
}

Fl_Return_Button *btnCloseConfig=(Fl_Return_Button *)0;

static void cb_btnCloseConfig(Fl_Return_Button*, void*) {
  closeDialog();
}

Fl_Button *btnSaveConfig=(Fl_Button *)0;

static void cb_btnSaveConfig(Fl_Button*, void*) {
  progdefaults.saveDefaults();
}

Fl_Double_Window* ConfigureDialog() {
  Fl_Double_Window* w;
  static const char szShifts[]  = "23|85|160|170|182|200|240|350|425|850";
static const char szBauds[]  = "45|45.45|50|56|75|100|110|150|200|300";
static const char szSelBits[] = "5 (baudot)|7 (ascii)|8 (ascii)";
static const char szParity[]  = "none|even|odd|zero|one";
static const char szStopBits[] = "1|1.5|2";
static const char szOliviaTones[] = "2|4|8|16|32|64|128|256";
static const char szOliviaBandwidth[] = "125|250|500|1000|2000";
static const char szBaudRates[] = "300|600|1200|2400|4800|9600|19200|38400|57600|115200|230400|460800";
  { Fl_Double_Window* o = new Fl_Double_Window(400, 255, "fldigi - config");
    w = o;
    o->color(FL_DARK2);
    o->selection_color((Fl_Color)51);
    o->align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE);
    { Fl_Tabs* o = tabsConfigure = new Fl_Tabs(0, 0, 405, 220);
      o->color(FL_DARK1);
      o->selection_color((Fl_Color)9);
      { Fl_Group* o = tabOperator = new Fl_Group(0, 25, 400, 195, "Oper");
        o->color((Fl_Color)51);
        o->selection_color((Fl_Color)51);
        o->callback((Fl_Callback*)cb_tabOperator);
        o->when(FL_WHEN_CHANGED);
        o->hide();
        inpMyCallsign = new Fl_Input(78, 36, 85, 24, "Callsign:");
        { Fl_Input* o = inpMyName = new Fl_Input(78, 62, 120, 24, "Name:");
          o->callback((Fl_Callback*)cb_inpMyName);
        }
        { Fl_Input* o = inpMyQth = new Fl_Input(78, 89, 312, 24, "Qth:");
          o->callback((Fl_Callback*)cb_inpMyQth);
        }
        { Fl_Input* o = inpMyLocator = new Fl_Input(78, 116, 85, 24, "Locator:");
          o->callback((Fl_Callback*)cb_inpMyLocator);
        }
        { Fl_Group* o = new Fl_Group(5, 145, 390, 70, "Contest Setup");
          o->box(FL_ENGRAVED_FRAME);
          o->align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE);
          { Fl_Check_Button* o = btnUseLeadingZeros = new Fl_Check_Button(42, 175, 165, 15, "Use Leading Zeros");
            o->down_box(FL_DOWN_BOX);
            o->value(1);
            o->callback((Fl_Callback*)cb_btnUseLeadingZeros);
          }
          { Fl_Value_Input* o = nbrContestStart = new Fl_Value_Input(216, 170, 45, 24, "Starting #:");
            o->minimum(1);
            o->maximum(10000);
            o->step(1);
            o->value(1);
            o->callback((Fl_Callback*)cb_nbrContestStart);
            o->align(FL_ALIGN_TOP);
          }
          { Fl_Value_Input* o = nbrContestDigits = new Fl_Value_Input(298, 170, 45, 24, "# of digits:");
            o->minimum(1);
            o->maximum(5);
            o->step(1);
            o->value(3);
            o->callback((Fl_Callback*)cb_nbrContestDigits);
            o->align(FL_ALIGN_TOP);
          }
          o->end();
        }
        o->end();
      }
      { Fl_Group* o = tabWaterfall = new Fl_Group(0, 25, 405, 195, "W-fall");
        o->color((Fl_Color)51);
        o->selection_color((Fl_Color)51);
        o->hide();
        { Fl_Tabs* o = new Fl_Tabs(0, 25, 405, 195);
          { Fl_Group* o = new Fl_Group(0, 50, 400, 170, "Filters/Colors");
            { Fl_Group* o = new Fl_Group(5, 55, 390, 75, "FFT Prefilter");
              o->box(FL_ENGRAVED_BOX);
              o->color((Fl_Color)51);
              o->align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE);
              { Fl_Check_Button* o = btnBlackman = new Fl_Check_Button(11, 75, 90, 15, "Blackman");
                o->down_box(FL_DOWN_BOX);
                o->callback((Fl_Callback*)cb_btnBlackman);
                if(progdefaults.wfPreFilter==1)o->value(1);else o->value(0);
              }
              { Fl_Check_Button* o = btnHamming = new Fl_Check_Button(108, 75, 90, 15, "Hamming");
                o->down_box(FL_DOWN_BOX);
                o->callback((Fl_Callback*)cb_btnHamming);
                if(progdefaults.wfPreFilter==2)o->value(1);else o->value(0);
              }
              { Fl_Check_Button* o = btnHanning = new Fl_Check_Button(206, 75, 90, 15, "Hanning");
                o->down_box(FL_DOWN_BOX);
                o->callback((Fl_Callback*)cb_btnHanning);
                if(progdefaults.wfPreFilter==3)o->value(1);else o->value(0);
              }
              { Fl_Check_Button* o = btnTriangular = new Fl_Check_Button(304, 75, 90, 15, "Triangular");
                o->down_box(FL_DOWN_BOX);
                o->callback((Fl_Callback*)cb_btnTriangular);
                if(progdefaults.wfPreFilter==4)o->value(1);else o->value(0);
              }
              { Fl_Counter* o = cntLowFreqCutoff = new Fl_Counter(155, 97, 94, 21, "Low Freq Cutoff");
                o->type(1);
                o->minimum(0);
                o->maximum(500);
                o->step(50);
                o->value(300);
                o->callback((Fl_Callback*)cb_cntLowFreqCutoff);
                o->align(FL_ALIGN_LEFT);
                o->value(progdefaults.LowFreqCutoff);
              }
              o->end();
            }
            { Fl_Group* o = new Fl_Group(5, 131, 390, 85);
              o->box(FL_ENGRAVED_FRAME);
              { colorbox* o = Palette = new colorbox(28, 152, 260, 24, "Palette:");
                o->box(FL_DOWN_BOX);
                o->color(FL_FOREGROUND_COLOR);
                o->selection_color(FL_BACKGROUND_COLOR);
                o->labeltype(FL_NORMAL_LABEL);
                o->labelfont(0);
                o->labelsize(14);
                o->labelcolor(FL_FOREGROUND_COLOR);
                o->callback((Fl_Callback*)cb_Palette);
                o->align(FL_ALIGN_TOP_LEFT);
                o->when(FL_WHEN_RELEASE);
              }
              { Fl_Button* o = btnColor[0] = new Fl_Button(20, 184, 20, 24);
                o->callback((Fl_Callback*)cb_btnColor);
              }
              { Fl_Button* o = btnColor[1] = new Fl_Button(52, 184, 20, 24);
                o->callback((Fl_Callback*)cb_btnColor1);
              }
              { Fl_Button* o = btnColor[2] = new Fl_Button(84, 184, 20, 24);
                o->callback((Fl_Callback*)cb_btnColor2);
              }
              { Fl_Button* o = btnColor[3] = new Fl_Button(116, 184, 20, 24);
                o->callback((Fl_Callback*)cb_btnColor3);
              }
              { Fl_Button* o = btnColor[4] = new Fl_Button(148, 184, 20, 24);
                o->callback((Fl_Callback*)cb_btnColor4);
              }
              { Fl_Button* o = btnColor[5] = new Fl_Button(180, 184, 20, 24);
                o->callback((Fl_Callback*)cb_btnColor5);
              }
              { Fl_Button* o = btnColor[6] = new Fl_Button(212, 184, 20, 24);
                o->callback((Fl_Callback*)cb_btnColor6);
              }
              { Fl_Button* o = btnColor[7] = new Fl_Button(244, 184, 20, 24);
                o->callback((Fl_Callback*)cb_btnColor7);
              }
              { Fl_Button* o = btnColor[8] = new Fl_Button(276, 184, 20, 24);
                o->callback((Fl_Callback*)cb_btnColor8);
              }
              { Fl_Button* o = btnLoadPalette = new Fl_Button(320, 152, 70, 24, "Load");
                o->callback((Fl_Callback*)cb_btnLoadPalette);
              }
              { Fl_Button* o = btnSavePalette = new Fl_Button(320, 184, 70, 24, "Save");
                o->callback((Fl_Callback*)cb_btnSavePalette);
              }
              o->end();
            }
            o->end();
          }
          { Fl_Group* o = new Fl_Group(0, 50, 405, 166, "Cursors");
            o->hide();
            { Fl_Group* o = new Fl_Group(5, 56, 390, 158);
              o->box(FL_ENGRAVED_FRAME);
              { Fl_Check_Button* o = btnUseCursorLines = new Fl_Check_Button(170, 75, 100, 20, "Cursor BW");
                o->down_box(FL_DOWN_BOX);
                o->callback((Fl_Callback*)cb_btnUseCursorLines);
                o->value(progdefaults.UseCursorLines);
              }
              { Fl_Check_Button* o = btnUseBWTracks = new Fl_Check_Button(170, 155, 100, 20, "BW Tracks");
                o->down_box(FL_DOWN_BOX);
                o->callback((Fl_Callback*)cb_btnUseBWTracks);
                o->value(progdefaults.UseBWTracks);
              }
              { Fl_Check_Button* o = btnUseCursorCenterLine = new Fl_Check_Button(170, 114, 137, 21, "Cursor Center");
                o->down_box(FL_DOWN_BOX);
                o->callback((Fl_Callback*)cb_btnUseCursorCenterLine);
                o->value(progdefaults.UseCursorCenterLine);
              }
              { Fl_Button* o = btnCursorBWcolor = new Fl_Button(137, 75, 19, 20);
                o->tooltip("Select Cursor BW color");
                o->color((Fl_Color)3);
                o->callback((Fl_Callback*)cb_btnCursorBWcolor);
                o->color(fl_rgb_color(progdefaults.cursorLineRGBI.R,progdefaults.cursorLineRGBI.G,progdefaults.cursorLineRGBI.B));
              }
              { Fl_Button* o = btnCursorCenterLineColor = new Fl_Button(137, 114, 19, 20);
                o->tooltip("Select Center Line color");
                o->color(FL_BACKGROUND2_COLOR);
                o->callback((Fl_Callback*)cb_btnCursorCenterLineColor);
                o->color(fl_rgb_color(progdefaults.cursorCenterRGBI.R,progdefaults.cursorCenterRGBI.G,progdefaults.cursorCenterRGBI.B));
              }
              { Fl_Button* o = btnBwTracksColor = new Fl_Button(137, 155, 19, 20);
                o->tooltip("Select BW tracks color");
                o->color((Fl_Color)1);
                o->callback((Fl_Callback*)cb_btnBwTracksColor);
                o->color(fl_rgb_color(progdefaults.bwTrackRGBI.R,progdefaults.bwTrackRGBI.G,progdefaults.bwTrackRGBI.B));
              }
              o->end();
            }
            o->end();
          }
          o->end();
        }
        o->end();
      }
      { Fl_Group* o = tabVideo = new Fl_Group(0, 25, 400, 195, "Video");
        o->color((Fl_Color)51);
        o->selection_color((Fl_Color)51);
        o->hide();
        { Fl_Group* o = new Fl_Group(5, 40, 390, 67, "Video Preamble");
          o->box(FL_ENGRAVED_FRAME);
          o->align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE);
          { Fl_Check_Button* o = btnsendid = new Fl_Check_Button(11, 57, 115, 20, "Xmt Mode ID");
            o->down_box(FL_DOWN_BOX);
            o->callback((Fl_Callback*)cb_btnsendid);
          }
          { Fl_Check_Button* o = btnsendvideotext = new Fl_Check_Button(11, 82, 115, 20, "Xmt Video Text");
            o->down_box(FL_DOWN_BOX);
            o->callback((Fl_Callback*)cb_btnsendvideotext);
            o->value(progdefaults.sendtextid);
          }
          { Fl_Input* o = valVideotext = new Fl_Input(159, 82, 94, 20, "Video Text:");
            o->tooltip("Limit to a few characters as in CQEM or IOTA etc.");
            o->callback((Fl_Callback*)cb_valVideotext);
            o->align(FL_ALIGN_TOP_LEFT);
            o->value(progdefaults.strTextid.c_str());
          }
          { Fl_Value_Slider* o = sldrVideowidth = new Fl_Value_Slider(286, 82, 101, 20, "Video Width:");
            o->tooltip("Set the # of chars per row");
            o->type(1);
            o->color((Fl_Color)26);
            o->minimum(1);
            o->maximum(4);
            o->step(1);
            o->value(1);
            o->textsize(14);
            o->callback((Fl_Callback*)cb_sldrVideowidth);
            o->align(FL_ALIGN_TOP);
            o->value(progdefaults.videowidth);
          }
          o->end();
        }
        { Fl_Check_Button* o = btnViewXmtSignal = new Fl_Check_Button(11, 115, 135, 20, "View Xmt Signal");
          o->down_box(FL_DOWN_BOX);
          o->callback((Fl_Callback*)cb_btnViewXmtSignal);
          o->value(progdefaults.viewXmtSignal);
        }
        { Fl_Group* o = sld = new Fl_Group(5, 143, 390, 70, "CW Postamble");
          o->box(FL_ENGRAVED_FRAME);
          o->align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE);
          { Fl_Check_Button* o = btnCWID = new Fl_Check_Button(13, 179, 98, 15, "Xmt CWID");
            o->down_box(FL_DOWN_BOX);
            o->callback((Fl_Callback*)cb_btnCWID);
            o->value(progdefaults.CWid);
          }
          { Fl_Value_Slider* o = sldrCWIDwpm = new Fl_Value_Slider(124, 176, 233, 20, "CWID wpm:");
            o->type(1);
            o->color((Fl_Color)26);
            o->minimum(15);
            o->maximum(40);
            o->step(1);
            o->value(18);
            o->textsize(14);
            o->callback((Fl_Callback*)cb_sldrCWIDwpm);
            o->align(FL_ALIGN_TOP_LEFT);
            o->value(progdefaults.CWIDwpm);
          }
          o->end();
        }
        o->end();
      }
      { Fl_Group* o = tabRig = new Fl_Group(0, 25, 400, 195, "Rig");
        o->hide();
        { Fl_Group* o = new Fl_Group(10, 36, 185, 150, "Ptt");
          o->box(FL_ENGRAVED_FRAME);
          o->align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE);
          { Fl_Round_Button* o = btnPTT[0] = new Fl_Round_Button(25, 57, 64, 15, "none");
            o->down_box(FL_DIAMOND_DOWN_BOX);
            o->value(1);
            o->selection_color((Fl_Color)1);
            o->callback((Fl_Callback*)cb_btnPTT);
          }
          { Fl_Group* o = new Fl_Group(12, 81, 180, 94);
            o->box(FL_ENGRAVED_FRAME);
            o->align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE);
            { Fl_Input* o = inpTTYdev = new Fl_Input(52, 87, 134, 22, "Port:");
              o->tooltip("Enter /dev/ttyS0 for COM1");
              o->callback((Fl_Callback*)cb_inpTTYdev);
            }
            { Fl_Round_Button* o = btnRTSptt = new Fl_Round_Button(20, 134, 54, 15, "RTS");
              o->down_box(FL_DOWN_BOX);
              o->callback((Fl_Callback*)cb_btnRTSptt);
            }
            { Fl_Round_Button* o = btnDTRptt = new Fl_Round_Button(20, 154, 59, 15, "DTR");
              o->down_box(FL_DOWN_BOX);
              o->callback((Fl_Callback*)cb_btnDTRptt);
            }
            { Fl_Round_Button* o = btnRTSplusV = new Fl_Round_Button(83, 134, 87, 15, "RTS=+V");
              o->down_box(FL_DOWN_BOX);
              o->callback((Fl_Callback*)cb_btnRTSplusV);
            }
            { Fl_Round_Button* o = btnDTRplusV = new Fl_Round_Button(83, 154, 87, 15, "DTR=+V");
              o->down_box(FL_DOWN_BOX);
              o->callback((Fl_Callback*)cb_btnDTRplusV);
            }
            new Fl_Box(80, 114, 105, 17, "Initial value");
            o->end();
          }
          { Fl_Round_Button* o = btnPTT[4] = new Fl_Round_Button(100, 56, 52, 14, "TTY");
            o->down_box(FL_DIAMOND_DOWN_BOX);
            o->selection_color((Fl_Color)1);
            o->callback((Fl_Callback*)cb_btnPTT1);
          }
          o->end();
        }
        { Fl_Tabs* o = new Fl_Tabs(200, 34, 200, 152);
          { Fl_Group* o = new Fl_Group(200, 60, 200, 120, "RigCAT");
            { Fl_Check_Button* o = chkUSERIGCAT = new Fl_Check_Button(345, 75, 20, 20, "use rigCAT");
              o->down_box(FL_DOWN_BOX);
              o->callback((Fl_Callback*)cb_chkUSERIGCAT);
              o->align(FL_ALIGN_LEFT);
            }
            { Fl_Round_Button* o = btnPTT[3] = new Fl_Round_Button(345, 105, 20, 19, "use RigCAT PTT");
              o->down_box(FL_DIAMOND_DOWN_BOX);
              o->selection_color((Fl_Color)1);
              o->callback((Fl_Callback*)cb_btnPTT2);
              o->align(FL_ALIGN_LEFT);
              o->deactivate();
            }
            o->end();
          }
          { Fl_Group* o = new Fl_Group(200, 60, 200, 120, "Hamlib");
            o->hide();
            { Fl_Check_Button* o = chkUSEHAMLIB = new Fl_Check_Button(350, 64, 20, 20, "use Hamlib");
              o->down_box(FL_DOWN_BOX);
              o->callback((Fl_Callback*)cb_chkUSEHAMLIB);
              o->align(FL_ALIGN_LEFT);
            }
            { Fl_ComboBox* o = cboHamlibRig = new Fl_ComboBox(240, 104, 150, 22, "Rig:");
              o->box(FL_DOWN_BOX);
              o->color(FL_BACKGROUND2_COLOR);
              o->selection_color(FL_BACKGROUND_COLOR);
              o->labeltype(FL_NORMAL_LABEL);
              o->labelfont(0);
              o->labelsize(14);
              o->labelcolor(FL_FOREGROUND_COLOR);
              o->callback((Fl_Callback*)cb_cboHamlibRig);
              o->align(FL_ALIGN_LEFT);
              o->when(FL_WHEN_RELEASE);
              o->deactivate();
              o->readonly();
            }
            { Fl_Input* o = inpRIGdev = new Fl_Input(256, 129, 134, 22, "Port:");
              o->tooltip("Enter /dev/ttyS0 for COM1");
              o->callback((Fl_Callback*)cb_inpRIGdev);
              o->deactivate();
            }
            { Fl_Choice* o = mnuBaudRate = new Fl_Choice(291, 154, 99, 22, "Baud Rate:");
              o->down_box(FL_BORDER_BOX);
              o->callback((Fl_Callback*)cb_mnuBaudRate);
              o->deactivate();
              o->add(szBaudRates);
            }
            { Fl_Round_Button* o = btnPTT[1] = new Fl_Round_Button(350, 83, 20, 20, "use Hamlib PTT");
              o->down_box(FL_DIAMOND_DOWN_BOX);
              o->selection_color((Fl_Color)1);
              o->callback((Fl_Callback*)cb_btnPTT3);
              o->align(FL_ALIGN_LEFT);
              o->deactivate();
            }
            o->end();
          }
          { Fl_Group* o = new Fl_Group(200, 60, 200, 120, "Memmap");
            o->hide();
            { Fl_Check_Button* o = chkUSEMEMMAP = new Fl_Check_Button(345, 75, 20, 20, "use Memmap");
              o->down_box(FL_DOWN_BOX);
              o->callback((Fl_Callback*)cb_chkUSEMEMMAP);
              o->align(FL_ALIGN_LEFT);
            }
            { Fl_Round_Button* o = btnPTT[2] = new Fl_Round_Button(345, 105, 20, 20, "use Memmap PTT");
              o->down_box(FL_DIAMOND_DOWN_BOX);
              o->selection_color((Fl_Color)1);
              o->callback((Fl_Callback*)cb_btnPTT4);
              o->align(FL_ALIGN_LEFT);
              o->deactivate();
            }
            o->end();
          }
          o->end();
        }
        { Fl_Button* o = btnInit_Interface = new Fl_Button(262, 190, 80, 24, "Initialize");
          o->callback((Fl_Callback*)cb_btnInit_Interface);
        }
        o->end();
      }
      { Fl_Group* o = tabQRZ = new Fl_Group(0, 25, 400, 195, "QRZ");
        o->color((Fl_Color)51);
        o->selection_color((Fl_Color)51);
        o->hide();
        { Fl_Check_Button* o = btnQRZnotavailable = new Fl_Check_Button(31, 50, 200, 20, "QRZ not available");
          o->down_box(FL_DOWN_BOX);
          o->value(1);
          o->callback((Fl_Callback*)cb_btnQRZnotavailable);
          if (progdefaults.QRZ == 0) o->value(1); else o->value(0);
        }
        { Fl_Check_Button* o = btnQRZsocket = new Fl_Check_Button(32, 103, 205, 20, "QRZ internet subscription");
          o->tooltip("You need a QRZ on-line subscription to access QRZ.com");
          o->down_box(FL_DOWN_BOX);
          o->callback((Fl_Callback*)cb_btnQRZsocket);
          if (progdefaults.QRZ == 1) o->value(1); else o->value(0);
        }
        { Fl_Check_Button* o = btnQRZcdrom = new Fl_Check_Button(31, 76, 200, 20, "QRZ cdrom");
          o->down_box(FL_DOWN_BOX);
          o->callback((Fl_Callback*)cb_btnQRZcdrom);
          if (progdefaults.QRZ == 2) o->value(1); else o->value(0);
        }
        { Fl_Input* o = inpQRZusername = new Fl_Input(150, 129, 90, 25, "User name:");
          o->callback((Fl_Callback*)cb_inpQRZusername);
          o->value(progdefaults.QRZusername.c_str());
        }
        { Fl_Input* o = inpQRZuserpassword = new Fl_Input(150, 160, 90, 25, "User password:");
          o->callback((Fl_Callback*)cb_inpQRZuserpassword);
          o->value(progdefaults.QRZuserpassword.c_str()); o->type(FL_SECRET_INPUT);
        }
        { Fl_Button* o = btnQRZpasswordShow = new Fl_Button(245, 160, 50, 25, "Show");
          o->callback((Fl_Callback*)cb_btnQRZpasswordShow);
        }
        o->end();
      }
      { Fl_Group* o = tabSoundCard = new Fl_Group(0, 25, 400, 195, "SndCrd");
        o->color((Fl_Color)51);
        o->selection_color((Fl_Color)51);
        o->hide();
        { Fl_Tabs* o = tabsSoundCard = new Fl_Tabs(0, 25, 400, 195);
          o->selection_color((Fl_Color)10);
          { Fl_Group* o = tabAudio = new Fl_Group(0, 50, 400, 170, "Audio");
            o->color((Fl_Color)51);
            o->selection_color((Fl_Color)51);
            { Fl_Spinner* o = cntRxRateCorr = new Fl_Spinner(300, 160, 75, 24, "RX ppm:");
              o->callback((Fl_Callback*)cb_cntRxRateCorr);
              o->step(1);
              o->minimum(-50000);
              o->maximum(50000);
            }
            { Fl_Spinner* o = cntTxRateCorr = new Fl_Spinner(300, 130, 75, 24, "TX ppm:");
              o->callback((Fl_Callback*)cb_cntTxRateCorr);
              o->step(1);
              o->minimum(-50000);
              o->maximum(50000);
            }
            { Fl_Spinner* o = cntTxOffset = new Fl_Spinner(330, 190, 45, 24, "Tx offset:");
              o->callback((Fl_Callback*)cb_cntTxOffset);
              o->value(progdefaults.TxOffset);
              o->step(1);
              o->minimum(-50);
              o->maximum(50);
            }
            { Fl_Group* o = AudioIO = new Fl_Group(0, 55, 140, 70, "I/O");
              o->box(FL_ENGRAVED_FRAME);
              o->align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE);
              { Fl_Round_Button* o = btnAudioIO[0] = new Fl_Round_Button(25, 70, 95, 25, "OSS");
                o->down_box(FL_DIAMOND_DOWN_BOX);
                o->selection_color((Fl_Color)1);
                o->callback((Fl_Callback*)cb_btnAudioIO);
              }
              { Fl_Round_Button* o = btnAudioIO[1] = new Fl_Round_Button(25, 95, 100, 25, "PortAudio");
                o->down_box(FL_DIAMOND_DOWN_BOX);
                o->selection_color((Fl_Color)1);
                o->callback((Fl_Callback*)cb_btnAudioIO1);
              }
              o->end();
            }
            { Fl_Input_Choice* o = menuOSSDev = new Fl_Input_Choice(155, 60, 110, 25, "OSS device");
              o->callback((Fl_Callback*)cb_menuOSSDev);
              o->align(FL_ALIGN_RIGHT);
              o->value(progdefaults.OSSdevice.c_str());
            }
            { Fl_Input_Choice* o = menuPADev = new Fl_Input_Choice(155, 90, 110, 25, "PortAudio device");
              o->callback((Fl_Callback*)cb_menuPADev);
              o->align(FL_ALIGN_RIGHT);
              o->value(progdefaults.PAdevice.c_str());
            }
            { Fl_Choice* o = menuSampleRate = new Fl_Choice(5, 190, 85, 25, "Sample rate");
              o->tooltip("Force a specific sample rate. Select \"Native\" if \"Auto\" does not work wel\
l with your sound hardware.");
              o->down_box(FL_BORDER_BOX);
              o->callback((Fl_Callback*)cb_menuSampleRate);
              o->align(FL_ALIGN_RIGHT);
              o->menu(sample_rate_menu);
            }
            o->end();
          }
          { Fl_Group* o = tabMixer = new Fl_Group(0, 50, 400, 170, "Mixer");
            o->color((Fl_Color)51);
            o->selection_color((Fl_Color)51);
            o->hide();
            { Fl_Light_Button* o = btnLineIn = new Fl_Light_Button(295, 64, 74, 22, "Line In");
              o->selection_color((Fl_Color)3);
              o->callback((Fl_Callback*)cb_btnLineIn);
            }
            { Fl_Light_Button* o = btnMicIn = new Fl_Light_Button(295, 94, 74, 22, "Mic In");
              o->callback((Fl_Callback*)cb_btnMicIn);
            }
            { Fl_Value_Slider* o = valPCMvolume = new Fl_Value_Slider(19, 125, 340, 21, "PCM");
              o->type(5);
              o->color((Fl_Color)26);
              o->selection_color((Fl_Color)1);
              o->step(0.01);
              o->value(0.8);
              o->textsize(14);
              o->callback((Fl_Callback*)cb_valPCMvolume);
              o->align(FL_ALIGN_RIGHT);
            }
            { Fl_Input_Choice* o = menuMix = new Fl_Input_Choice(105, 90, 110, 25, "Device");
              o->callback((Fl_Callback*)cb_menuMix);
              o->value(progdefaults.MXdevice.c_str());
            }
            { Fl_Check_Button* o = btnMixer = new Fl_Check_Button(55, 61, 125, 25, "Manage mixer");
              o->down_box(FL_DOWN_BOX);
              o->callback((Fl_Callback*)cb_btnMixer);
              o->value(progdefaults.EnableMixer);
            }
            o->end();
          }
          o->end();
        }
        o->end();
      }
      { Fl_Group* o = tabMisc = new Fl_Group(0, 25, 400, 195, "Misc");
        o->color((Fl_Color)51);
        o->selection_color((Fl_Color)51);
        o->hide();
        { Fl_Group* o = new Fl_Group(5, 35, 390, 90, "Sweet Spot");
          o->box(FL_ENGRAVED_FRAME);
          o->align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE);
          { Fl_Value_Input* o = valCWsweetspot = new Fl_Value_Input(50, 59, 65, 20, "CW");
            o->minimum(200);
            o->maximum(4000);
            o->step(1);
            o->value(1000);
            o->callback((Fl_Callback*)cb_valCWsweetspot);
            o->value(progdefaults.CWsweetspot);
          }
          { Fl_Value_Input* o = valRTTYsweetspot = new Fl_Value_Input(182, 59, 65, 20, "RTTY");
            o->minimum(200);
            o->maximum(4000);
            o->step(1);
            o->value(1000);
            o->callback((Fl_Callback*)cb_valRTTYsweetspot);
            o->value(progdefaults.RTTYsweetspot);
          }
          { Fl_Value_Input* o = valPSKsweetspot = new Fl_Value_Input(315, 59, 65, 20, "PSK etal");
            o->minimum(200);
            o->maximum(4000);
            o->step(1);
            o->value(1000);
            o->callback((Fl_Callback*)cb_valPSKsweetspot);
            o->value(progdefaults.PSKsweetspot);
          }
          { Fl_Check_Button* o = btnStartAtSweetSpot = new Fl_Check_Button(49, 88, 246, 25, "Start New Modem at Sweet Spot");
            o->down_box(FL_DOWN_BOX);
            o->value(1);
            o->callback((Fl_Callback*)cb_btnStartAtSweetSpot);
            o->value(progdefaults.StartAtSweetSpot);
          }
          o->end();
        }
        { Fl_Check_Button* o = btntextwidgets = new Fl_Check_Button(50, 155, 180, 20, "Alternative text widgets");
          o->tooltip("These widgets have full editing support but are slower.\nThis option takes ef\
fect after a restart.");
          o->down_box(FL_DOWN_BOX);
          o->value(1);
          o->callback((Fl_Callback*)cb_btntextwidgets);
          o->hide();
        }
        o->end();
      }
      { Fl_Group* o = tabModems = new Fl_Group(0, 25, 401, 195, "Modem");
        o->color((Fl_Color)51);
        o->selection_color((Fl_Color)51);
        { Fl_Tabs* o = tabsModems = new Fl_Tabs(0, 25, 401, 195);
          o->color((Fl_Color)51);
          o->selection_color((Fl_Color)10);
          o->align(FL_ALIGN_TOP_RIGHT);
          { Fl_Group* o = tabCW = new Fl_Group(0, 50, 400, 170, "CW");
            o->color((Fl_Color)51);
            o->selection_color((Fl_Color)51);
            o->hide();
            { Fl_Group* o = new Fl_Group(1, 60, 398, 155);
              o->box(FL_ENGRAVED_FRAME);
              { Fl_Value_Slider* o = sldrCWbandwidth = new Fl_Value_Slider(65, 65, 325, 20, "BW");
                o->type(5);
                o->color(FL_BACKGROUND2_COLOR);
                o->minimum(10);
                o->maximum(500);
                o->step(10);
                o->value(150);
                o->textsize(14);
                o->callback((Fl_Callback*)cb_sldrCWbandwidth);
                o->align(FL_ALIGN_LEFT);
                o->value(progdefaults.CWbandwidth);
              }
              { Fl_Counter* o = cntCWrange = new Fl_Counter(140, 89, 65, 20, "Rx Trkg Rng");
                o->type(1);
                o->minimum(5);
                o->maximum(25);
                o->step(1);
                o->value(10);
                o->callback((Fl_Callback*)cb_cntCWrange);
                o->align(FL_ALIGN_LEFT);
                o->value(progdefaults.CWrange);
              }
              { Fl_Check_Button* o = btnCWrcvTrack = new Fl_Check_Button(215, 89, 20, 20, "Enable Rx Trkg");
                o->down_box(FL_DOWN_BOX);
                o->value(1);
                o->callback((Fl_Callback*)cb_btnCWrcvTrack);
                o->align(FL_ALIGN_RIGHT);
                o->value(progdefaults.CWtrack);
              }
              { Fl_Value_Output* o = valCWrcvWPM = new Fl_Value_Output(65, 113, 35, 20, "RxWPM");
                o->color(FL_BACKGROUND2_COLOR);
                o->callback((Fl_Callback*)cb_valCWrcvWPM);
              }
              { Fl_Progress* o = prgsCWrcvWPM = new Fl_Progress(100, 113, 290, 20);
                o->color(FL_INACTIVE_COLOR);
                o->selection_color((Fl_Color)110);
                o->align(FL_ALIGN_CENTER);
              }
              { Fl_Value_Slider* o = sldrCWxmtWPM = new Fl_Value_Slider(65, 135, 325, 20, "TxWPM");
                o->type(5);
                o->color((Fl_Color)215);
                o->minimum(5);
                o->maximum(100);
                o->step(1);
                o->value(20);
                o->textsize(14);
                o->callback((Fl_Callback*)cb_sldrCWxmtWPM);
                o->align(FL_ALIGN_LEFT);
                o->value(progdefaults.CWspeed);
              }
              { Fl_Counter* o = cntCWlowerlimit = new Fl_Counter(203, 160, 65, 20, "Lower");
                o->type(1);
                o->minimum(5);
                o->maximum(20);
                o->step(5);
                o->value(10);
                o->callback((Fl_Callback*)cb_cntCWlowerlimit);
                o->align(FL_ALIGN_LEFT);
                o->value(progdefaults.CWlowerlimit);
              }
              { Fl_Counter* o = cntCWupperlimit = new Fl_Counter(325, 160, 65, 20, "Upper");
                o->type(1);
                o->minimum(25);
                o->maximum(200);
                o->step(5);
                o->value(100);
                o->callback((Fl_Callback*)cb_cntCWupperlimit);
                o->align(FL_ALIGN_LEFT);
                o->value(progdefaults.CWupperlimit);
              }
              { Fl_Counter* o = cntCWweight = new Fl_Counter(64, 185, 65, 20, "Wt. %");
                o->type(1);
                o->minimum(20);
                o->maximum(80);
                o->step(1);
                o->value(50);
                o->callback((Fl_Callback*)cb_cntCWweight);
                o->align(FL_ALIGN_LEFT);
                o->value(progdefaults.CWweight);
              }
              { Fl_Counter* o = cntCWdash2dot = new Fl_Counter(205, 185, 64, 21, "Dash/Dot");
                o->type(1);
                o->minimum(2.5);
                o->maximum(4);
                o->step(0.1);
                o->value(3);
                o->callback((Fl_Callback*)cb_cntCWdash2dot);
                o->align(FL_ALIGN_LEFT);
                o->value(progdefaults.CWdash2dot);
              }
              { Fl_Counter* o = cntCWrisetime = new Fl_Counter(325, 185, 65, 21, "Edge");
                o->type(1);
                o->minimum(0);
                o->maximum(15);
                o->step(0.1);
                o->value(4);
                o->callback((Fl_Callback*)cb_cntCWrisetime);
                o->align(FL_ALIGN_LEFT);
                o->value(progdefaults.CWrisetime);
              }
              { Fl_Counter* o = cntCWdefWPM = new Fl_Counter(65, 160, 64, 21, "Default");
                o->type(1);
                o->minimum(5);
                o->maximum(200);
                o->step(1);
                o->value(18);
                o->callback((Fl_Callback*)cb_cntCWdefWPM);
                o->align(FL_ALIGN_LEFT);
                o->value(progdefaults.defCWspeed);
              }
              o->end();
            }
            o->end();
          }
          { Fl_Group* o = tabCWQSK = new Fl_Group(0, 50, 400, 170, "QSK");
            o->hide();
            { Fl_Check_Button* o = btnQSK = new Fl_Check_Button(35, 75, 175, 15, "QSK on right channel");
              o->down_box(FL_DOWN_BOX);
              o->callback((Fl_Callback*)cb_btnQSK);
              o->value(progdefaults.QSK);
            }
            { Fl_Counter* o = cntPreTiming = new Fl_Counter(25, 109, 64, 21, "Pre Timing");
              o->type(1);
              o->minimum(0);
              o->maximum(50);
              o->step(0.5);
              o->value(4);
              o->callback((Fl_Callback*)cb_cntPreTiming);
              o->value(progdefaults.CWpre);
              o->maximum((int)(2400/progdefaults.CWspeed)/2.0);
            }
            { Fl_Counter* o = cntPostTiming = new Fl_Counter(125, 109, 64, 21, "Post Timing");
              o->type(1);
              o->minimum(0);
              o->maximum(50);
              o->step(0.5);
              o->value(4);
              o->callback((Fl_Callback*)cb_cntPostTiming);
              o->value(progdefaults.CWpre);
              o->maximum((int)(2400/progdefaults.CWspeed)/2.0);
            }
            o->end();
          }
          { Fl_Group* o = tabDomEX = new Fl_Group(0, 50, 400, 170, "DomEX");
            o->color((Fl_Color)51);
            o->selection_color((Fl_Color)51);
            o->hide();
            { Fl_Input* o = txtSecondary = new Fl_Input(20, 75, 360, 44, "Secondary Text");
              o->type(4);
              o->callback((Fl_Callback*)cb_txtSecondary);
              o->align(FL_ALIGN_TOP_LEFT);
            }
            { Fl_Button* o = btnRestartDomEX = new Fl_Button(300, 172, 79, 28, "Restart");
              o->callback((Fl_Callback*)cb_btnRestartDomEX);
            }
            { Fl_Counter* o = valDominoEX_BW = new Fl_Counter(25, 134, 63, 21, "BW factor:");
              o->type(1);
              o->minimum(1);
              o->maximum(3);
              o->step(0.1);
              o->value(2);
              o->callback((Fl_Callback*)cb_valDominoEX_BW);
              o->value(progdefaults.DOMINOEX_BW);
            }
            o->end();
          }
          { Fl_Group* o = tabFeld = new Fl_Group(0, 50, 400, 170, "Feld");
            o->color((Fl_Color)51);
            o->selection_color((Fl_Color)51);
            o->hide();
            { Fl_Choice* o = selHellFont = new Fl_Choice(175, 62, 122, 20, "Feld Hell Font:");
              o->down_box(FL_BORDER_BOX);
              o->labelfont(4);
              o->textfont(4);
              o->callback((Fl_Callback*)cb_selHellFont);
              o->add(szFeldFonts);
              o->value(progdefaults.feldfontnbr);
            }
            { Fl_Value_Slider* o = sldrHellBW = new Fl_Value_Slider(30, 190, 345, 20, "Filter BW");
              o->type(1);
              o->color((Fl_Color)215);
              o->minimum(50);
              o->maximum(600);
              o->step(5);
              o->value(245);
              o->textsize(14);
              o->callback((Fl_Callback*)cb_sldrHellBW);
              o->align(FL_ALIGN_TOP_LEFT);
            }
            { Fl_Check_Button* o = btnHellXmtWidth = new Fl_Check_Button(40, 93, 113, 15, "2x Xmt Width");
              o->down_box(FL_DOWN_BOX);
              o->callback((Fl_Callback*)cb_btnHellXmtWidth);
            }
            { Fl_Check_Button* o = btnHellRcvWidth = new Fl_Check_Button(40, 113, 130, 15, "1/2 x Rcv Width");
              o->down_box(FL_DOWN_BOX);
              o->callback((Fl_Callback*)cb_btnHellRcvWidth);
            }
            { Fl_Check_Button* o = btnBlackboard = new Fl_Check_Button(40, 134, 100, 15, "blackboard");
              o->down_box(FL_DOWN_BOX);
              o->callback((Fl_Callback*)cb_btnBlackboard);
            }
            { Fl_Group* o = new Fl_Group(175, 90, 195, 85, "Pulse Shape");
              o->box(FL_ENGRAVED_FRAME);
              o->align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE);
              { Fl_Check_Button* o = btnHellFastAttack = new Fl_Check_Button(185, 110, 169, 15, "Fast Attack (2 msec)");
                o->down_box(FL_DOWN_BOX);
                o->callback((Fl_Callback*)cb_btnHellFastAttack);
                o->value(0);
              }
              { Fl_Check_Button* o = btnHellSlowAttack = new Fl_Check_Button(185, 131, 70, 15, "Slow Attack (4 msec)");
                o->down_box(FL_DOWN_BOX);
                o->value(1);
                o->callback((Fl_Callback*)cb_btnHellSlowAttack);
                o->value(1);
              }
              o->end();
            }
            { Fl_Check_Button* o = btnFeldHellIdle = new Fl_Check_Button(40, 155, 70, 15, "Xmt (.) Idle Char");
              o->down_box(FL_DOWN_BOX);
              o->value(1);
              o->callback((Fl_Callback*)cb_btnFeldHellIdle);
              o->value(progdefaults.FELD_IDLE);
            }
            o->end();
          }
          { Fl_Group* o = tabOlivia = new Fl_Group(0, 50, 400, 170, "Olivia");
            o->color((Fl_Color)51);
            o->selection_color((Fl_Color)51);
            o->hide();
            { Fl_Choice* o = mnuOlivia_Tones = new Fl_Choice(90, 72, 85, 20, "Tones");
              o->down_box(FL_BORDER_BOX);
              o->callback((Fl_Callback*)cb_mnuOlivia_Tones);
              o->add(szOliviaTones);
              o->value(2);
            }
            { Fl_Choice* o = mnuOlivia_Bandwidth = new Fl_Choice(270, 72, 85, 20, "Bandwidth");
              o->down_box(FL_BORDER_BOX);
              o->callback((Fl_Callback*)cb_mnuOlivia_Bandwidth);
              o->add(szOliviaBandwidth);
              o->value(2);
            }
            { Fl_Button* o = btnRestartOlivia = new Fl_Button(300, 172, 79, 28, "Restart");
              o->callback((Fl_Callback*)cb_btnRestartOlivia);
            }
            { Fl_Counter* o = cntOlivia_smargin = new Fl_Counter(90, 105, 85, 20, "RX sync tune margin");
              o->type(1);
              o->minimum(2);
              o->maximum(128);
              o->step(1);
              o->value(2);
              o->callback((Fl_Callback*)cb_cntOlivia_smargin);
              o->align(FL_ALIGN_RIGHT);
            }
            { Fl_Counter* o = cntOlivia_sinteg = new Fl_Counter(90, 135, 85, 20, "RX sync integration period");
              o->type(1);
              o->minimum(2);
              o->maximum(128);
              o->step(1);
              o->value(2);
              o->callback((Fl_Callback*)cb_cntOlivia_sinteg);
              o->align(FL_ALIGN_RIGHT);
            }
            o->end();
          }
          { Fl_Group* o = tabPSK = new Fl_Group(0, 50, 400, 170, "Psk");
            { Fl_Counter* o = cntSearchRange = new Fl_Counter(25, 60, 80, 21, "Search Range");
              o->type(1);
              o->minimum(10);
              o->maximum(500);
              o->step(10);
              o->value(200);
              o->callback((Fl_Callback*)cb_cntSearchRange);
              o->align(FL_ALIGN_RIGHT);
              o->value(progdefaults.SearchRange);
            }
            { Fl_Group* o = new Fl_Group(15, 87, 370, 53, "PskMail Server");
              o->box(FL_ENGRAVED_FRAME);
              o->align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE);
              { Fl_Check_Button* o = btnPSKmailSweetSpot = new Fl_Check_Button(20, 106, 130, 20, "use sweetspot");
                o->down_box(FL_DOWN_BOX);
                o->value(1);
                o->callback((Fl_Callback*)cb_btnPSKmailSweetSpot);
                o->value(progdefaults.PSKmailSweetSpot);
              }
              { Fl_Counter* o = cntServerOffset = new Fl_Counter(150, 104, 80, 21, "Server Search Range");
                o->type(1);
                o->minimum(10);
                o->maximum(500);
                o->step(10);
                o->value(200);
                o->callback((Fl_Callback*)cb_cntServerOffset);
                o->align(FL_ALIGN_RIGHT);
                o->value(progdefaults.SearchRange);
              }
              o->end();
            }
            { Fl_Group* o = new Fl_Group(15, 140, 370, 75, "PSK Viewer");
              o->box(FL_ENGRAVED_FRAME);
              o->align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE);
              { Fl_Check_Button* o = btnMarquee = new Fl_Check_Button(25, 162, 120, 15, "Marquee style");
                o->down_box(FL_DOWN_BOX);
                o->callback((Fl_Callback*)cb_btnMarquee);
                o->value(progdefaults.VIEWERmarquee);
              }
              { Fl_Check_Button* o = btnShowFrequencies = new Fl_Check_Button(25, 190, 150, 15, "Show Frequencies");
                o->down_box(FL_DOWN_BOX);
                o->callback((Fl_Callback*)cb_btnShowFrequencies);
                o->value(progdefaults.VIEWERshowfreq);
              }
              { Fl_Spinner* o = cntStartFrequency = new Fl_Spinner(315, 185, 60, 25, "Start Frequency:");
                o->callback((Fl_Callback*)cb_cntStartFrequency);
                o->minimum(200);
                o->maximum(1000);
                o->step(100);
                o->value(progdefaults.VIEWERstart);
              }
              { Fl_Spinner* o = cntChannels = new Fl_Spinner(325, 157, 50, 25, "# Channels:");
                o->callback((Fl_Callback*)cb_cntChannels);
                o->minimum(5);
                o->maximum(30);
                o->step(1);
                o->value(progdefaults.VIEWERchannels);
              }
              o->end();
            }
            o->end();
          }
          { Fl_Group* o = tabRTTY = new Fl_Group(0, 50, 400, 170, "RTTY");
            o->color((Fl_Color)51);
            o->selection_color((Fl_Color)51);
            o->hide();
            { Fl_Choice* o = selShift = new Fl_Choice(58, 65, 77, 24, "Shift");
              o->down_box(FL_BORDER_BOX);
              o->callback((Fl_Callback*)cb_selShift);
              o->add(szShifts);
            }
            { Fl_Choice* o = selBaud = new Fl_Choice(58, 95, 77, 24, "Baud");
              o->down_box(FL_BORDER_BOX);
              o->callback((Fl_Callback*)cb_selBaud);
              o->add(szBauds);
            }
            { Fl_Choice* o = selBits = new Fl_Choice(179, 65, 77, 24, "Bits");
              o->down_box(FL_BORDER_BOX);
              o->callback((Fl_Callback*)cb_selBits);
              o->add(szSelBits);
            }
            { Fl_Choice* o = selParity = new Fl_Choice(179, 95, 77, 24, "Parity");
              o->down_box(FL_BORDER_BOX);
              o->callback((Fl_Callback*)cb_selParity);
              o->add(szParity);
            }
            { Fl_Choice* o = selStopBits = new Fl_Choice(179, 122, 77, 24, "Stop");
              o->down_box(FL_BORDER_BOX);
              o->callback((Fl_Callback*)cb_selStopBits);
              o->add(szStopBits);
            }
            { Fl_Check_Button* o = chkPseudoFSK = new Fl_Check_Button(15, 126, 120, 24, "PseudoFSK");
              o->down_box(FL_DOWN_BOX);
              o->callback((Fl_Callback*)cb_chkPseudoFSK);
              o->value(progdefaults.PseudoFSK);
            }
            { Fl_Button* o = btnRestartRtty = new Fl_Button(300, 180, 79, 28, "Restart");
              o->callback((Fl_Callback*)cb_btnRestartRtty);
            }
            { Fl_Check_Button* o = btnCRCRLF = new Fl_Check_Button(15, 155, 115, 15, "CR-CR-LF");
              o->down_box(FL_DOWN_BOX);
              o->callback((Fl_Callback*)cb_btnCRCRLF);
              o->when(FL_WHEN_RELEASE_ALWAYS);
            }
            { Fl_Check_Button* o = btnAUTOCRLF = new Fl_Check_Button(15, 184, 125, 15, "AutoCRLF");
              o->down_box(FL_DOWN_BOX);
              o->callback((Fl_Callback*)cb_btnAUTOCRLF);
            }
            { Fl_Counter* o = cntrAUTOCRLF = new Fl_Counter(150, 181, 65, 20, "after:");
              o->type(1);
              o->minimum(68);
              o->maximum(80);
              o->step(1);
              o->value(72);
              o->callback((Fl_Callback*)cb_cntrAUTOCRLF);
              o->align(FL_ALIGN_LEFT);
            }
            { Fl_Check_Button* o = btnRTTY_USB = new Fl_Check_Button(140, 153, 109, 20, "RTTY is USB");
              o->down_box(FL_DOWN_BOX);
              o->callback((Fl_Callback*)cb_btnRTTY_USB);
              o->value(progdefaults.RTTY_USB);
            }
            { Fl_Group* o = new Fl_Group(265, 65, 125, 65, "AFC");
              o->box(FL_ENGRAVED_FRAME);
              o->color((Fl_Color)51);
              o->align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE);
              { Fl_Round_Button* o = btnRTTYafc[0] = new Fl_Round_Button(315, 70, 70, 15, "Slow");
                o->type(102);
                o->down_box(FL_DIAMOND_DOWN_BOX);
                o->selection_color((Fl_Color)2);
                o->callback((Fl_Callback*)cb_btnRTTYafc);
              }
              { Fl_Round_Button* o = btnRTTYafc[1] = new Fl_Round_Button(315, 90, 70, 15, "Normal");
                o->type(102);
                o->down_box(FL_DIAMOND_DOWN_BOX);
                o->value(1);
                o->selection_color((Fl_Color)2);
                o->callback((Fl_Callback*)cb_btnRTTYafc1);
              }
              { Fl_Round_Button* o = btnRTTYafc[2] = new Fl_Round_Button(315, 110, 70, 15, "Fast");
                o->type(102);
                o->down_box(FL_DIAMOND_DOWN_BOX);
                o->selection_color((Fl_Color)2);
                o->callback((Fl_Callback*)cb_btnRTTYafc2);
              }
              o->end();
            }
            { Fl_Check_Button* o = btnPreferXhairScope = new Fl_Check_Button(265, 155, 120, 15, "X hair scope");
              o->down_box(FL_DOWN_BOX);
              o->callback((Fl_Callback*)cb_btnPreferXhairScope);
              o->value(progdefaults.PreferXhairScope);
            }
            o->end();
          }
          o->end();
        }
        o->end();
      }
      o->end();
    }
    { Fl_Return_Button* o = btnCloseConfig = new Fl_Return_Button(285, 225, 100, 25, "Close");
      o->callback((Fl_Callback*)cb_btnCloseConfig);
    }
    { Fl_Button* o = btnSaveConfig = new Fl_Button(15, 225, 100, 25, "Save Config");
      o->callback((Fl_Callback*)cb_btnSaveConfig);
    }
    o->end();
  }
  return w;
}

void openConfig() {
  if (!dlgConfig) createConfig();
progdefaults.loadDefaults();
}

void closeDialog() {
  if (dlgConfig) dlgConfig->hide();
}

void createConfig() {
  if (!dlgConfig) {
    dlgConfig = ConfigureDialog();
    dlgConfig->xclass(PACKAGE_NAME);
  }
}

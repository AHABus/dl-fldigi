// generated by Fast Light User Interface Designer (fluid) version 1.0109

#include "arqdialogs.h"
#include <config.h>
#include <string>
#include "flarq.h"

static void cb_flarq(Fl_Double_Window*, void*) {
  arqCLOSE();
}

Fl_Menu_Bar *mnu=(Fl_Menu_Bar *)0;

static void cb_mnuExit(Fl_Menu_*, void*) {
  arqCLOSE();
}

static void cb_mnuSendEmail(Fl_Menu_*, void*) {
  sendEmailFile();
}

static void cb_mnuSendText(Fl_Menu_*, void*) {
  sendAsciiFile();
}

static void cb_mnuSendImage(Fl_Menu_*, void*) {
  sendImageFile();
}

static void cb_mnuSendBinary(Fl_Menu_*, void*) {
  sendBinaryFile();
}

static void cb_mnuCompose(Fl_Menu_*, void*) {
  ComposeMail();
}

static void cb_mnuConfig(Fl_Menu_*, void*) {
  cbMenuConfig();
}

static void cb_mnuHowTo(Fl_Menu_*, void*) {
  help_cb();
}

static void cb_mnuAbout(Fl_Menu_*, void*) {
  cbMenuAbout();
}

Fl_Menu_Item menu_mnu[] = {
 {"&File", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {"E&xit", 0,  (Fl_Callback*)cb_mnuExit, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {"&Send", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {"Email", 0,  (Fl_Callback*)cb_mnuSendEmail, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Text File", 0,  (Fl_Callback*)cb_mnuSendText, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Image File", 0,  (Fl_Callback*)cb_mnuSendImage, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Binary File", 0,  (Fl_Callback*)cb_mnuSendBinary, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {"Compose", 0,  (Fl_Callback*)cb_mnuCompose, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"&Config", 0,  (Fl_Callback*)cb_mnuConfig, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Help", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {"How To", 0,  (Fl_Callback*)cb_mnuHowTo, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"About", 0,  (Fl_Callback*)cb_mnuAbout, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0,0}
};

Fl_Button *btnCONNECT=(Fl_Button *)0;

static void cb_btnCONNECT(Fl_Button*, void*) {
  arqCONNECT();
}

Fl_Input2 *txtURCALL=(Fl_Input2 *)0;

Fl_Light_Button *btnBEACON=(Fl_Light_Button *)0;

static void cb_btnBEACON(Fl_Light_Button*, void*) {
  arqBEACON();
}

Fl_Input2 *txtBeaconing=(Fl_Input2 *)0;

Fl_Box *indCONNECT=(Fl_Box *)0;

Fl_Input2 *txtState=(Fl_Input2 *)0;

Fl_Text_Display *txtARQ=(Fl_Text_Display *)0;

Fl_Input2 *txtStatus=(Fl_Input2 *)0;

Fl_Input2 *txtStatus2=(Fl_Input2 *)0;

Fl_Progress *prgStatus=(Fl_Progress *)0;

Fl_Button *btnClearText=(Fl_Button *)0;

static void cb_btnClearText(Fl_Button*, void*) {
  cbClearText();
}

Fl_Text_Display *txtRX=(Fl_Text_Display *)0;

Fl_Input2 *txtTX=(Fl_Input2 *)0;

static void cb_txtTX(Fl_Input2*, void*) {
  cbSendTalk();
}

Fl_Button *btnSendTalk=(Fl_Button *)0;

static void cb_btnSendTalk(Fl_Button*, void*) {
  cbClearTalk();
}

Fl_Double_Window* arq_dialog() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = new Fl_Double_Window(515, 415, "flarq");
    w = o;
    o->color(FL_LIGHT1);
    o->callback((Fl_Callback*)cb_flarq);
    { mnu = new Fl_Menu_Bar(0, 0, 516, 22);
      mnu->menu(menu_mnu);
    } // Fl_Menu_Bar* mnu
    { Fl_Group* o = new Fl_Group(0, 25, 515, 60);
      { Fl_Group* o = new Fl_Group(0, 25, 515, 31);
        o->box(FL_ENGRAVED_FRAME);
        { btnCONNECT = new Fl_Button(5, 28, 90, 24, "Connnect");
          btnCONNECT->tooltip("Connect to other station");
          btnCONNECT->color(FL_LIGHT1);
          btnCONNECT->callback((Fl_Callback*)cb_btnCONNECT);
        } // Fl_Button* btnCONNECT
        { txtURCALL = new Fl_Input2(97, 28, 70, 24);
          txtURCALL->tooltip("Connect-to callsign");
          txtURCALL->box(FL_DOWN_BOX);
          txtURCALL->color(FL_BACKGROUND2_COLOR);
          txtURCALL->selection_color(FL_SELECTION_COLOR);
          txtURCALL->labeltype(FL_NORMAL_LABEL);
          txtURCALL->labelfont(0);
          txtURCALL->labelsize(14);
          txtURCALL->labelcolor(FL_FOREGROUND_COLOR);
          txtURCALL->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
          txtURCALL->when(FL_WHEN_RELEASE);
        } // Fl_Input2* txtURCALL
        { btnBEACON = new Fl_Light_Button(168, 28, 79, 24, "Beacon");
          btnBEACON->tooltip("Beacon ON / OFF");
          btnBEACON->selection_color((Fl_Color)2);
          btnBEACON->callback((Fl_Callback*)cb_btnBEACON);
        } // Fl_Light_Button* btnBEACON
        { Fl_Input2* o = txtBeaconing = new Fl_Input2(249, 28, 261, 24, "output:");
          txtBeaconing->box(FL_FLAT_BOX);
          txtBeaconing->color(FL_LIGHT1);
          txtBeaconing->selection_color(FL_SELECTION_COLOR);
          txtBeaconing->labeltype(FL_NORMAL_LABEL);
          txtBeaconing->labelfont(0);
          txtBeaconing->labelsize(14);
          txtBeaconing->labelcolor(FL_FOREGROUND_COLOR);
          txtBeaconing->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
          txtBeaconing->when(FL_WHEN_RELEASE);
          Fl_Group::current()->resizable(txtBeaconing);
          o->type(FL_NORMAL_OUTPUT);
        } // Fl_Input2* txtBeaconing
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(0, 54, 515, 31);
        o->box(FL_ENGRAVED_FRAME);
        { indCONNECT = new Fl_Box(5, 60, 18, 18);
          indCONNECT->tooltip("ARQ state");
          indCONNECT->box(FL_DIAMOND_DOWN_BOX);
          indCONNECT->color(FL_LIGHT1);
          indCONNECT->labelfont(13);
          indCONNECT->align(FL_ALIGN_RIGHT|FL_ALIGN_INSIDE);
        } // Fl_Box* indCONNECT
        { Fl_Input2* o = txtState = new Fl_Input2(27, 57, 483, 24, "Disconnecting");
          txtState->box(FL_FLAT_BOX);
          txtState->color(FL_LIGHT1);
          txtState->selection_color(FL_SELECTION_COLOR);
          txtState->labeltype(FL_NORMAL_LABEL);
          txtState->labelfont(0);
          txtState->labelsize(14);
          txtState->labelcolor(FL_FOREGROUND_COLOR);
          txtState->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
          txtState->when(FL_WHEN_RELEASE);
          Fl_Group::current()->resizable(txtState);
          o->type(FL_NORMAL_OUTPUT);
        } // Fl_Input2* txtState
        o->end();
      } // Fl_Group* o
      o->end();
    } // Fl_Group* o
    { txtARQ = new Fl_Text_Display(0, 87, 515, 117);
      txtARQ->box(FL_DOWN_BOX);
      txtARQ->textfont(4);
      Fl_Group::current()->resizable(txtARQ);
    } // Fl_Text_Display* txtARQ
    { Fl_Group* o = new Fl_Group(0, 206, 516, 26);
      o->box(FL_DOWN_BOX);
      { Fl_Input2* o = txtStatus = new Fl_Input2(5, 208, 220, 22);
        txtStatus->tooltip("Status messages");
        txtStatus->box(FL_DOWN_BOX);
        txtStatus->color(FL_BACKGROUND2_COLOR);
        txtStatus->selection_color(FL_SELECTION_COLOR);
        txtStatus->labeltype(FL_NORMAL_LABEL);
        txtStatus->labelfont(0);
        txtStatus->labelsize(14);
        txtStatus->labelcolor(FL_FOREGROUND_COLOR);
        txtStatus->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
        txtStatus->when(FL_WHEN_RELEASE);
        Fl_Group::current()->resizable(txtStatus);
        o->type(FL_NORMAL_OUTPUT);
      } // Fl_Input2* txtStatus
      { Fl_Input2* o = txtStatus2 = new Fl_Input2(225, 208, 170, 22);
        txtStatus2->box(FL_DOWN_BOX);
        txtStatus2->color(FL_BACKGROUND2_COLOR);
        txtStatus2->selection_color(FL_SELECTION_COLOR);
        txtStatus2->labeltype(FL_NORMAL_LABEL);
        txtStatus2->labelfont(0);
        txtStatus2->labelsize(14);
        txtStatus2->labelcolor(FL_FOREGROUND_COLOR);
        txtStatus2->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
        txtStatus2->when(FL_WHEN_RELEASE);
        o->type(FL_NORMAL_OUTPUT);
      } // Fl_Input2* txtStatus2
      { Fl_Progress* o = prgStatus = new Fl_Progress(395, 210, 70, 18);
        prgStatus->tooltip("Tx/Rx ARQ file transfer progress");
        prgStatus->selection_color((Fl_Color)70);
        prgStatus->labelfont(1);
        o->minimum(0.0);
        o->maximum(1.0);
      } // Fl_Progress* prgStatus
      { btnClearText = new Fl_Button(468, 210, 45, 20, "Clear");
        btnClearText->callback((Fl_Callback*)cb_btnClearText);
      } // Fl_Button* btnClearText
      o->end();
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(0, 235, 515, 180, "Plain Talk");
      o->box(FL_ENGRAVED_FRAME);
      o->align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE);
      { txtRX = new Fl_Text_Display(5, 255, 505, 130);
        txtRX->box(FL_DOWN_BOX);
        txtRX->textfont(4);
        Fl_Group::current()->resizable(txtRX);
      } // Fl_Text_Display* txtRX
      { Fl_Group* o = new Fl_Group(0, 387, 515, 28);
        o->box(FL_ENGRAVED_FRAME);
        { txtTX = new Fl_Input2(5, 390, 450, 22, "input:");
          txtTX->tooltip("Plain talk text - ENTER to send");
          txtTX->box(FL_DOWN_BOX);
          txtTX->color(FL_BACKGROUND2_COLOR);
          txtTX->selection_color(FL_SELECTION_COLOR);
          txtTX->labeltype(FL_NORMAL_LABEL);
          txtTX->labelfont(0);
          txtTX->labelsize(14);
          txtTX->labelcolor(FL_FOREGROUND_COLOR);
          txtTX->callback((Fl_Callback*)cb_txtTX);
          txtTX->align(FL_ALIGN_CENTER);
          txtTX->when(FL_WHEN_ENTER_KEY);
          Fl_Group::current()->resizable(txtTX);
          txtTX->value("");
          txtTX->maximum_size(80);
        } // Fl_Input2* txtTX
        { btnSendTalk = new Fl_Button(460, 390, 49, 22, "Clear");
          btnSendTalk->callback((Fl_Callback*)cb_btnSendTalk);
        } // Fl_Button* btnSendTalk
        o->end();
      } // Fl_Group* o
      o->end();
    } // Fl_Group* o
    o->end();
  } // Fl_Double_Window* o
  return w;
}

Fl_Input2 *txtMyCall=(Fl_Input2 *)0;

static void cb_txtMyCall(Fl_Input2* o, void*) {
  changeMyCall(o->value());
}

Fl_Input2 *txtFolder=(Fl_Input2 *)0;

static void cb_txtFolder(Fl_Input2* o, void*) {
  InFolder = o->value();
}

Fl_Input2 *txtOutputFolder=(Fl_Input2 *)0;

static void cb_txtOutputFolder(Fl_Input2* o, void*) {
  OutFolder = o->value();
}

Fl_Input2 *txtMail_IN=(Fl_Input2 *)0;

static void cb_txtMail_IN(Fl_Input2* o, void*) {
  MailInFolder = o->value();
}

Fl_Input2 *txtMail_OUT=(Fl_Input2 *)0;

static void cb_txtMail_OUT(Fl_Input2* o, void*) {
  MailOutFolder = o->value();
}

Fl_Input2 *txtMail_SENT=(Fl_Input2 *)0;

static void cb_txtMail_SENT(Fl_Input2* o, void*) {
  MailSentFolder = o->value();
}

Fl_Check_Button *btnSylpheedMail=(Fl_Check_Button *)0;

static void cb_btnSylpheedMail(Fl_Check_Button* o, void*) {
  bSylpheedFolder = o->value();
}

Fl_Spinner *spnExponent=(Fl_Spinner *)0;

static void cb_spnExponent(Fl_Spinner* o, void*) {
  exponent = (int)o->value();
switch (exponent) {
case 4: txtBlockSize->value("16"); break;
case 5: txtBlockSize->value("32"); break;
case 6: txtBlockSize->value("64"); break;
case 7: txtBlockSize->value("128"); break;
case 8: txtBlockSize->value("256"); break;
default:
txtBlockSize->value("32");break;
}
cbSetConfig();
}

Fl_Spinner *spnRetries=(Fl_Spinner *)0;

static void cb_spnRetries(Fl_Spinner* o, void*) {
  iretries = (int)o->value();
cbSetConfig();
}

Fl_Spinner *spnWaitTime=(Fl_Spinner *)0;

static void cb_spnWaitTime(Fl_Spinner* o, void*) {
  iwaittime = (int)(1000 * o->value());
cbSetConfig();
}

Fl_Spinner *spnTimeout=(Fl_Spinner *)0;

static void cb_spnTimeout(Fl_Spinner* o, void*) {
  itimeout = (int)(o->value() * 1000.0);
cbSetConfig();
}

Fl_Spinner *spnTxDelay=(Fl_Spinner *)0;

static void cb_spnTxDelay(Fl_Spinner* o, void*) {
  txdelay = (int)o->value();
cbSetConfig();
}

Fl_Spinner *spnBcnInterval=(Fl_Spinner *)0;

static void cb_spnBcnInterval(Fl_Spinner* o, void*) {
  bcnInterval = (int)o->value();
cbSetConfig();
}

Fl_Input2 *txtBlockSize=(Fl_Input2 *)0;

Fl_Button *btnOK=(Fl_Button *)0;

static void cb_btnOK(Fl_Button*, void*) {
  closeConfig();
}

Fl_Input2 *txtBEACONTXT=(Fl_Input2 *)0;

static void cb_txtBEACONTXT(Fl_Input2* o, void*) {
  changeBeaconText(o->value());
}

Fl_Double_Window* arq_configure() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = new Fl_Double_Window(625, 195, "Configure flarq");
    w = o;
    { Fl_Group* o = new Fl_Group(2, 2, 190, 166);
      o->box(FL_ENGRAVED_FRAME);
      { Fl_Input2* o = txtMyCall = new Fl_Input2(5, 22, 100, 24, "My Call:");
        txtMyCall->box(FL_DOWN_BOX);
        txtMyCall->color(FL_BACKGROUND2_COLOR);
        txtMyCall->selection_color(FL_SELECTION_COLOR);
        txtMyCall->labeltype(FL_NORMAL_LABEL);
        txtMyCall->labelfont(0);
        txtMyCall->labelsize(14);
        txtMyCall->labelcolor(FL_FOREGROUND_COLOR);
        txtMyCall->callback((Fl_Callback*)cb_txtMyCall);
        txtMyCall->align(FL_ALIGN_TOP_LEFT);
        txtMyCall->when(FL_WHEN_RELEASE);
        o->value(MyCall.c_str());
      } // Fl_Input2* txtMyCall
      { Fl_Group* o = new Fl_Group(2, 60, 190, 105, "Text/Binary Files");
        o->box(FL_ENGRAVED_FRAME);
        o->align(FL_ALIGN_TOP|FL_ALIGN_INSIDE);
        { Fl_Input2* o = txtFolder = new Fl_Input2(6, 96, 180, 24, "In folder:");
          txtFolder->tooltip("Folder (in $HOME) to store incoming files");
          txtFolder->box(FL_DOWN_BOX);
          txtFolder->color(FL_BACKGROUND2_COLOR);
          txtFolder->selection_color(FL_SELECTION_COLOR);
          txtFolder->labeltype(FL_NORMAL_LABEL);
          txtFolder->labelfont(0);
          txtFolder->labelsize(14);
          txtFolder->labelcolor(FL_FOREGROUND_COLOR);
          txtFolder->callback((Fl_Callback*)cb_txtFolder);
          txtFolder->align(FL_ALIGN_TOP_LEFT);
          txtFolder->when(FL_WHEN_CHANGED);
          o->value(InFolder.c_str());
        } // Fl_Input2* txtFolder
        { Fl_Input2* o = txtOutputFolder = new Fl_Input2(6, 138, 180, 24, "Out folder:");
          txtOutputFolder->tooltip("Folder (in $HOME)  to store outgoing files");
          txtOutputFolder->box(FL_DOWN_BOX);
          txtOutputFolder->color(FL_BACKGROUND2_COLOR);
          txtOutputFolder->selection_color(FL_SELECTION_COLOR);
          txtOutputFolder->labeltype(FL_NORMAL_LABEL);
          txtOutputFolder->labelfont(0);
          txtOutputFolder->labelsize(14);
          txtOutputFolder->labelcolor(FL_FOREGROUND_COLOR);
          txtOutputFolder->callback((Fl_Callback*)cb_txtOutputFolder);
          txtOutputFolder->align(FL_ALIGN_TOP_LEFT);
          txtOutputFolder->when(FL_WHEN_CHANGED);
          o->value(OutFolder.c_str());
        } // Fl_Input2* txtOutputFolder
        o->end();
      } // Fl_Group* o
      o->end();
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(194, 3, 190, 164, "Mail Client Files");
      o->box(FL_ENGRAVED_FRAME);
      o->align(FL_ALIGN_TOP|FL_ALIGN_INSIDE);
      { Fl_Input2* o = txtMail_IN = new Fl_Input2(200, 37, 178, 24, "Mail In:");
        txtMail_IN->tooltip("Folder  to store incoming files");
        txtMail_IN->box(FL_DOWN_BOX);
        txtMail_IN->color(FL_BACKGROUND2_COLOR);
        txtMail_IN->selection_color(FL_SELECTION_COLOR);
        txtMail_IN->labeltype(FL_NORMAL_LABEL);
        txtMail_IN->labelfont(0);
        txtMail_IN->labelsize(14);
        txtMail_IN->labelcolor(FL_FOREGROUND_COLOR);
        txtMail_IN->callback((Fl_Callback*)cb_txtMail_IN);
        txtMail_IN->align(FL_ALIGN_TOP_LEFT);
        txtMail_IN->when(FL_WHEN_CHANGED);
        o->value(MailInFolder.c_str());
      } // Fl_Input2* txtMail_IN
      { Fl_Input2* o = txtMail_OUT = new Fl_Input2(200, 78, 178, 24, "Mail Out:");
        txtMail_OUT->tooltip("Folder  to store outgoing files");
        txtMail_OUT->box(FL_DOWN_BOX);
        txtMail_OUT->color(FL_BACKGROUND2_COLOR);
        txtMail_OUT->selection_color(FL_SELECTION_COLOR);
        txtMail_OUT->labeltype(FL_NORMAL_LABEL);
        txtMail_OUT->labelfont(0);
        txtMail_OUT->labelsize(14);
        txtMail_OUT->labelcolor(FL_FOREGROUND_COLOR);
        txtMail_OUT->callback((Fl_Callback*)cb_txtMail_OUT);
        txtMail_OUT->align(FL_ALIGN_TOP_LEFT);
        txtMail_OUT->when(FL_WHEN_CHANGED);
        o->value(MailOutFolder.c_str());
      } // Fl_Input2* txtMail_OUT
      { Fl_Input2* o = txtMail_SENT = new Fl_Input2(200, 119, 178, 24, "Mail Sent:");
        txtMail_SENT->tooltip("Folder to store outgoing files");
        txtMail_SENT->box(FL_DOWN_BOX);
        txtMail_SENT->color(FL_BACKGROUND2_COLOR);
        txtMail_SENT->selection_color(FL_SELECTION_COLOR);
        txtMail_SENT->labeltype(FL_NORMAL_LABEL);
        txtMail_SENT->labelfont(0);
        txtMail_SENT->labelsize(14);
        txtMail_SENT->labelcolor(FL_FOREGROUND_COLOR);
        txtMail_SENT->callback((Fl_Callback*)cb_txtMail_SENT);
        txtMail_SENT->align(FL_ALIGN_TOP_LEFT);
        txtMail_SENT->when(FL_WHEN_CHANGED);
        o->value(MailSentFolder.c_str());
      } // Fl_Input2* txtMail_SENT
      { Fl_Check_Button* o = btnSylpheedMail = new Fl_Check_Button(200, 146, 175, 15, "Sylpheed Mail Client");
        btnSylpheedMail->tooltip("Check ONLY if Sylpheed is used as mail client");
        btnSylpheedMail->down_box(FL_DOWN_BOX);
        btnSylpheedMail->callback((Fl_Callback*)cb_btnSylpheedMail);
        o->value(bSylpheedFolder);
      } // Fl_Check_Button* btnSylpheedMail
      o->end();
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(386, 3, 239, 163);
      o->box(FL_ENGRAVED_FRAME);
      { Fl_Spinner* o = spnExponent = new Fl_Spinner(464, 138, 30, 22, "Exponent:");
        spnExponent->tooltip("block size = 2^exponent");
        spnExponent->value(1);
        spnExponent->callback((Fl_Callback*)cb_spnExponent);
        o->minimum(4);
        o->maximum(8);
        o->step(1);
        o->value(exponent);
      } // Fl_Spinner* spnExponent
      { Fl_Spinner* o = spnRetries = new Fl_Spinner(570, 6, 45, 22, "Retries:");
        spnRetries->tooltip("# retries before connection declared down");
        spnRetries->value(1);
        spnRetries->callback((Fl_Callback*)cb_spnRetries);
        o->minimum(2);
        o->maximum(20);
        o->step(1);
        o->value(iretries);
      } // Fl_Spinner* spnRetries
      { Fl_Spinner* o = spnWaitTime = new Fl_Spinner(545, 32, 70, 22, "Wait time (sec):");
        spnWaitTime->tooltip("time between retries");
        spnWaitTime->value(1);
        spnWaitTime->callback((Fl_Callback*)cb_spnWaitTime);
        o->minimum(10);
        o->maximum(30);
        o->step(5);
        o->value(iwaittime/1000);
      } // Fl_Spinner* spnWaitTime
      { Fl_Spinner* o = spnTimeout = new Fl_Spinner(545, 58, 70, 22, "Timeout (sec):");
        spnTimeout->tooltip("Time out for dead connection");
        spnTimeout->value(1);
        spnTimeout->callback((Fl_Callback*)cb_spnTimeout);
        o->minimum(30);
        o->maximum(300);
        o->step(15);
        o->value(itimeout / 1000);
      } // Fl_Spinner* spnTimeout
      { Fl_Spinner* o = spnTxDelay = new Fl_Spinner(545, 84, 70, 22, "Tx delay (msec):");
        spnTxDelay->tooltip("delay from Rx to Tx");
        spnTxDelay->value(1);
        spnTxDelay->callback((Fl_Callback*)cb_spnTxDelay);
        o->minimum(200);
        o->maximum(2000);
        o->step(100);
        o->value(txdelay);
      } // Fl_Spinner* spnTxDelay
      { Fl_Spinner* o = spnBcnInterval = new Fl_Spinner(545, 110, 70, 22, "Beacon int\' (sec)");
        spnBcnInterval->tooltip("Time between beacon transmissions");
        spnBcnInterval->value(120);
        spnBcnInterval->callback((Fl_Callback*)cb_spnBcnInterval);
        o->minimum(60); o->maximum(3600);
        o->step(30);
        o->value(bcnInterval);
      } // Fl_Spinner* spnBcnInterval
      { Fl_Input2* o = txtBlockSize = new Fl_Input2(575, 136, 40, 24, " = Blk Size");
        txtBlockSize->box(FL_DOWN_BOX);
        txtBlockSize->color(FL_BACKGROUND2_COLOR);
        txtBlockSize->selection_color(FL_SELECTION_COLOR);
        txtBlockSize->labeltype(FL_NORMAL_LABEL);
        txtBlockSize->labelfont(0);
        txtBlockSize->labelsize(14);
        txtBlockSize->labelcolor(FL_FOREGROUND_COLOR);
        txtBlockSize->align(FL_ALIGN_LEFT);
        txtBlockSize->when(FL_WHEN_RELEASE);
        switch (exponent) {
case 4: o->value("16"); break;
case 5: o->value("32"); break;
case 6: o->value("64"); break;
case 7: o->value("128"); break;
default:
o->value("32");break;
}
o->type(FL_NORMAL_OUTPUT);
      } // Fl_Input2* txtBlockSize
      o->end();
    } // Fl_Group* o
    { btnOK = new Fl_Button(550, 169, 62, 24, "Ok");
      btnOK->callback((Fl_Callback*)cb_btnOK);
    } // Fl_Button* btnOK
    { Fl_Input2* o = txtBEACONTXT = new Fl_Input2(90, 168, 443, 24, "Beacon Text");
      txtBEACONTXT->tooltip("Text for the beacon 64 chars max");
      txtBEACONTXT->box(FL_DOWN_BOX);
      txtBEACONTXT->color(FL_BACKGROUND2_COLOR);
      txtBEACONTXT->selection_color(FL_SELECTION_COLOR);
      txtBEACONTXT->labeltype(FL_NORMAL_LABEL);
      txtBEACONTXT->labelfont(0);
      txtBEACONTXT->labelsize(14);
      txtBEACONTXT->labelcolor(FL_FOREGROUND_COLOR);
      txtBEACONTXT->callback((Fl_Callback*)cb_txtBEACONTXT);
      txtBEACONTXT->align(FL_ALIGN_LEFT);
      txtBEACONTXT->when(FL_WHEN_RELEASE);
      Fl_Group::current()->resizable(txtBEACONTXT);
      o->value(beacontext.c_str());
    } // Fl_Input2* txtBEACONTXT
    o->end();
  } // Fl_Double_Window* o
  return w;
}

Table *tblOutgoing=(Table *)0;

Fl_Button *send_Cancel=(Fl_Button *)0;

static void cb_send_Cancel(Fl_Button*, void*) {
  sendCancel();
}

Fl_Return_Button *send_OK=(Fl_Return_Button *)0;

static void cb_send_OK(Fl_Return_Button*, void*) {
  sendOK();
}

Fl_Double_Window* arq_SendSelect() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = new Fl_Double_Window(500, 170, "Select Email");
    w = o;
    { tblOutgoing = new Table(0, 3, 500, 140);
      tblOutgoing->box(FL_DOWN_BOX);
      tblOutgoing->color(FL_BACKGROUND2_COLOR);
      tblOutgoing->selection_color((Fl_Color)246);
      tblOutgoing->labeltype(FL_NORMAL_LABEL);
      tblOutgoing->labelfont(0);
      tblOutgoing->labelsize(14);
      tblOutgoing->labelcolor(FL_FOREGROUND_COLOR);
      tblOutgoing->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
      tblOutgoing->when(FL_WHEN_RELEASE);
    } // Table* tblOutgoing
    { send_Cancel = new Fl_Button(335, 145, 70, 20, "Cancel");
      send_Cancel->callback((Fl_Callback*)cb_send_Cancel);
    } // Fl_Button* send_Cancel
    { send_OK = new Fl_Return_Button(420, 145, 72, 20, "OK");
      send_OK->callback((Fl_Callback*)cb_send_OK);
    } // Fl_Return_Button* send_OK
    o->set_modal();
    o->end();
    o->resizable(o);
  } // Fl_Double_Window* o
  return w;
}

Fl_Input2 *inpMailTo=(Fl_Input2 *)0;

Fl_Input2 *inpMailSubj=(Fl_Input2 *)0;

Fl_Text_Editor *txtMailText=(Fl_Text_Editor *)0;

Fl_Button *btnOpenComposedMail=(Fl_Button *)0;

static void cb_btnOpenComposedMail(Fl_Button*, void*) {
  cb_OpenComposeMail();
}

Fl_Button *btnClearComposer=(Fl_Button *)0;

static void cb_btnClearComposer(Fl_Button*, void*) {
  cb_ClearComposer();
}

Fl_Button *btnUseTemplate=(Fl_Button *)0;

static void cb_btnUseTemplate(Fl_Button*, void*) {
  cb_UseTemplate();
}

Fl_Button *btnCancelComposedMail=(Fl_Button *)0;

static void cb_btnCancelComposedMail(Fl_Button*, void*) {
  cb_CancelComposeMail();
}

Fl_Button *btnSaveComposedMail=(Fl_Button *)0;

static void cb_btnSaveComposedMail(Fl_Button*, void*) {
  cb_SaveComposeMail();
}

Fl_Double_Window* arq_composer() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = new Fl_Double_Window(515, 275, "Flarq Mail Composer");
    w = o;
    { inpMailTo = new Fl_Input2(48, 4, 460, 24, "To:");
      inpMailTo->box(FL_DOWN_BOX);
      inpMailTo->color(FL_BACKGROUND2_COLOR);
      inpMailTo->selection_color(FL_SELECTION_COLOR);
      inpMailTo->labeltype(FL_NORMAL_LABEL);
      inpMailTo->labelfont(0);
      inpMailTo->labelsize(14);
      inpMailTo->labelcolor(FL_FOREGROUND_COLOR);
      inpMailTo->align(FL_ALIGN_LEFT);
      inpMailTo->when(FL_WHEN_RELEASE);
    } // Fl_Input2* inpMailTo
    { inpMailSubj = new Fl_Input2(48, 30, 460, 24, "Subj:");
      inpMailSubj->box(FL_DOWN_BOX);
      inpMailSubj->color(FL_BACKGROUND2_COLOR);
      inpMailSubj->selection_color(FL_SELECTION_COLOR);
      inpMailSubj->labeltype(FL_NORMAL_LABEL);
      inpMailSubj->labelfont(0);
      inpMailSubj->labelsize(14);
      inpMailSubj->labelcolor(FL_FOREGROUND_COLOR);
      inpMailSubj->align(FL_ALIGN_LEFT);
      inpMailSubj->when(FL_WHEN_RELEASE);
    } // Fl_Input2* inpMailSubj
    { txtMailText = new Fl_Text_Editor(0, 56, 510, 188);
      Fl_Group::current()->resizable(txtMailText);
    } // Fl_Text_Editor* txtMailText
    { Fl_Pack* o = new Fl_Pack(0, 247, 515, 28);
      o->type(1);
      { btnOpenComposedMail = new Fl_Button(4, 251, 70, 20, "Open");
        btnOpenComposedMail->tooltip("Open existing Composed email");
        btnOpenComposedMail->callback((Fl_Callback*)cb_btnOpenComposedMail);
      } // Fl_Button* btnOpenComposedMail
      { new Fl_Box(75, 251, 5, 20);
      } // Fl_Box* o
      { btnClearComposer = new Fl_Button(81, 251, 70, 20, "Clear");
        btnClearComposer->tooltip("Clear all fields");
        btnClearComposer->callback((Fl_Callback*)cb_btnClearComposer);
      } // Fl_Button* btnClearComposer
      { new Fl_Box(152, 251, 5, 20);
      } // Fl_Box* o
      { btnUseTemplate = new Fl_Button(159, 251, 70, 20, "Template");
        btnUseTemplate->tooltip("Use template file");
        btnUseTemplate->callback((Fl_Callback*)cb_btnUseTemplate);
      } // Fl_Button* btnUseTemplate
      { Fl_Box* o = new Fl_Box(230, 251, 127, 20);
        Fl_Group::current()->resizable(o);
      } // Fl_Box* o
      { btnCancelComposedMail = new Fl_Button(358, 251, 70, 20, "Cancel");
        btnCancelComposedMail->tooltip("Close Dialog");
        btnCancelComposedMail->callback((Fl_Callback*)cb_btnCancelComposedMail);
      } // Fl_Button* btnCancelComposedMail
      { new Fl_Box(429, 251, 5, 20);
      } // Fl_Box* o
      { btnSaveComposedMail = new Fl_Button(436, 251, 70, 20, "Save");
        btnSaveComposedMail->tooltip("Save this message (shift click Save Template)");
        btnSaveComposedMail->callback((Fl_Callback*)cb_btnSaveComposedMail);
      } // Fl_Button* btnSaveComposedMail
      o->end();
    } // Fl_Pack* o
    o->end();
  } // Fl_Double_Window* o
  return w;
}
